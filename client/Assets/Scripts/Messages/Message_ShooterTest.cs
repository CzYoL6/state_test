// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace UpdateShooterTest {

  /// <summary>Holder for reflection information generated from message.proto</summary>
  public static partial class MessageReflection {

    #region Descriptor
    /// <summary>File descriptor for message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1tZXNzYWdlLnByb3RvEhJVcGRhdGVfU2hvb3RlclRlc3QiRAoRUGxheWVy",
            "SW5mb19TX1RPX0MSCQoBeBgBIAEoAhIJCgF5GAIgASgCEg0KBWFuZ2xlGAMg",
            "ASgCEgoKAmlkGAQgASgFIoYBChFVcGRhdGVJbmZvX1NfVE9fQxIcChRsYXN0",
            "UHJvY2Vzc2VkRnJhbWVJRBgBIAEoBRI6CgtwbGF5ZXJJbmZvcxgCIAMoCzIl",
            "LlVwZGF0ZV9TaG9vdGVyVGVzdC5QbGF5ZXJJbmZvX1NfVE9fQxIXCg9pbnB1",
            "dEJ1ZmZlclNpemUYAyABKAUiEwoRS2NwQ29ubmVjdFJlcV9DX1MibwoSUGxh",
            "eWVySW5wdXRfQ19UT19TEg8KB2ZyYW1lSUQYASABKAUSCQoBdxgCIAEoCBIJ",
            "CgFzGAMgASgIEgkKAWEYBCABKAgSCQoBZBgFIAEoCBIQCghyb3RhdGlvbhgG",
            "IAEoAhIKCgJpZBgHIAEoBSpiCgRUWVBFEhUKEXVwZGF0ZUluZm9fU19UT19D",
            "EAASFAoQa2NwQ29ubmVjdGlvblJlcRABEhUKEXBsYXllckluZm9fU19UT19D",
            "EAISFgoScGxheWVySW5wdXRfQ19UT19TEANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::UpdateShooterTest.TYPE), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::UpdateShooterTest.PlayerInfo_S_TO_C), global::UpdateShooterTest.PlayerInfo_S_TO_C.Parser, new[]{ "X", "Y", "Angle", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::UpdateShooterTest.UpdateInfo_S_TO_C), global::UpdateShooterTest.UpdateInfo_S_TO_C.Parser, new[]{ "LastProcessedFrameID", "PlayerInfos", "InputBufferSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::UpdateShooterTest.KcpConnectReq_C_S), global::UpdateShooterTest.KcpConnectReq_C_S.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::UpdateShooterTest.PlayerInput_C_TO_S), global::UpdateShooterTest.PlayerInput_C_TO_S.Parser, new[]{ "FrameID", "W", "S", "A", "D", "Rotation", "Id" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TYPE {
    [pbr::OriginalName("updateInfo_S_TO_C")] UpdateInfoSToC = 0,
    [pbr::OriginalName("kcpConnectionReq")] KcpConnectionReq = 1,
    [pbr::OriginalName("playerInfo_S_TO_C")] PlayerInfoSToC = 2,
    [pbr::OriginalName("playerInput_C_TO_S")] PlayerInputCToS = 3,
  }

  #endregion

  #region Messages
  public sealed partial class PlayerInfo_S_TO_C : pb::IMessage<PlayerInfo_S_TO_C> {
    private static readonly pb::MessageParser<PlayerInfo_S_TO_C> _parser = new pb::MessageParser<PlayerInfo_S_TO_C>(() => new PlayerInfo_S_TO_C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo_S_TO_C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UpdateShooterTest.MessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo_S_TO_C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo_S_TO_C(PlayerInfo_S_TO_C other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      angle_ = other.angle_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo_S_TO_C Clone() {
      return new PlayerInfo_S_TO_C(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 3;
    private float angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 4;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo_S_TO_C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo_S_TO_C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Angle != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Angle);
      }
      if (Id != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Angle != 0F) {
        size += 1 + 4;
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo_S_TO_C other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Angle = input.ReadFloat();
            break;
          }
          case 32: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateInfo_S_TO_C : pb::IMessage<UpdateInfo_S_TO_C> {
    private static readonly pb::MessageParser<UpdateInfo_S_TO_C> _parser = new pb::MessageParser<UpdateInfo_S_TO_C>(() => new UpdateInfo_S_TO_C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateInfo_S_TO_C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UpdateShooterTest.MessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInfo_S_TO_C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInfo_S_TO_C(UpdateInfo_S_TO_C other) : this() {
      lastProcessedFrameID_ = other.lastProcessedFrameID_;
      playerInfos_ = other.playerInfos_.Clone();
      inputBufferSize_ = other.inputBufferSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInfo_S_TO_C Clone() {
      return new UpdateInfo_S_TO_C(this);
    }

    /// <summary>Field number for the "lastProcessedFrameID" field.</summary>
    public const int LastProcessedFrameIDFieldNumber = 1;
    private int lastProcessedFrameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastProcessedFrameID {
      get { return lastProcessedFrameID_; }
      set {
        lastProcessedFrameID_ = value;
      }
    }

    /// <summary>Field number for the "playerInfos" field.</summary>
    public const int PlayerInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::UpdateShooterTest.PlayerInfo_S_TO_C> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(18, global::UpdateShooterTest.PlayerInfo_S_TO_C.Parser);
    private readonly pbc::RepeatedField<global::UpdateShooterTest.PlayerInfo_S_TO_C> playerInfos_ = new pbc::RepeatedField<global::UpdateShooterTest.PlayerInfo_S_TO_C>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UpdateShooterTest.PlayerInfo_S_TO_C> PlayerInfos {
      get { return playerInfos_; }
    }

    /// <summary>Field number for the "inputBufferSize" field.</summary>
    public const int InputBufferSizeFieldNumber = 3;
    private int inputBufferSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputBufferSize {
      get { return inputBufferSize_; }
      set {
        inputBufferSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateInfo_S_TO_C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateInfo_S_TO_C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastProcessedFrameID != other.LastProcessedFrameID) return false;
      if(!playerInfos_.Equals(other.playerInfos_)) return false;
      if (InputBufferSize != other.InputBufferSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastProcessedFrameID != 0) hash ^= LastProcessedFrameID.GetHashCode();
      hash ^= playerInfos_.GetHashCode();
      if (InputBufferSize != 0) hash ^= InputBufferSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastProcessedFrameID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LastProcessedFrameID);
      }
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      if (InputBufferSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(InputBufferSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastProcessedFrameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastProcessedFrameID);
      }
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      if (InputBufferSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputBufferSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateInfo_S_TO_C other) {
      if (other == null) {
        return;
      }
      if (other.LastProcessedFrameID != 0) {
        LastProcessedFrameID = other.LastProcessedFrameID;
      }
      playerInfos_.Add(other.playerInfos_);
      if (other.InputBufferSize != 0) {
        InputBufferSize = other.InputBufferSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LastProcessedFrameID = input.ReadInt32();
            break;
          }
          case 18: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
          case 24: {
            InputBufferSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KcpConnectReq_C_S : pb::IMessage<KcpConnectReq_C_S> {
    private static readonly pb::MessageParser<KcpConnectReq_C_S> _parser = new pb::MessageParser<KcpConnectReq_C_S>(() => new KcpConnectReq_C_S());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KcpConnectReq_C_S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UpdateShooterTest.MessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KcpConnectReq_C_S() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KcpConnectReq_C_S(KcpConnectReq_C_S other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KcpConnectReq_C_S Clone() {
      return new KcpConnectReq_C_S(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KcpConnectReq_C_S);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KcpConnectReq_C_S other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KcpConnectReq_C_S other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PlayerInput_C_TO_S : pb::IMessage<PlayerInput_C_TO_S> {
    private static readonly pb::MessageParser<PlayerInput_C_TO_S> _parser = new pb::MessageParser<PlayerInput_C_TO_S>(() => new PlayerInput_C_TO_S());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInput_C_TO_S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UpdateShooterTest.MessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInput_C_TO_S() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInput_C_TO_S(PlayerInput_C_TO_S other) : this() {
      frameID_ = other.frameID_;
      w_ = other.w_;
      s_ = other.s_;
      a_ = other.a_;
      d_ = other.d_;
      rotation_ = other.rotation_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInput_C_TO_S Clone() {
      return new PlayerInput_C_TO_S(this);
    }

    /// <summary>Field number for the "frameID" field.</summary>
    public const int FrameIDFieldNumber = 1;
    private int frameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameID {
      get { return frameID_; }
      set {
        frameID_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 2;
    private bool w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 3;
    private bool s_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool S {
      get { return s_; }
      set {
        s_ = value;
      }
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 4;
    private bool a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "d" field.</summary>
    public const int DFieldNumber = 5;
    private bool d_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool D {
      get { return d_; }
      set {
        d_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 6;
    private float rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 7;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInput_C_TO_S);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInput_C_TO_S other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameID != other.FrameID) return false;
      if (W != other.W) return false;
      if (S != other.S) return false;
      if (A != other.A) return false;
      if (D != other.D) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameID != 0) hash ^= FrameID.GetHashCode();
      if (W != false) hash ^= W.GetHashCode();
      if (S != false) hash ^= S.GetHashCode();
      if (A != false) hash ^= A.GetHashCode();
      if (D != false) hash ^= D.GetHashCode();
      if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameID);
      }
      if (W != false) {
        output.WriteRawTag(16);
        output.WriteBool(W);
      }
      if (S != false) {
        output.WriteRawTag(24);
        output.WriteBool(S);
      }
      if (A != false) {
        output.WriteRawTag(32);
        output.WriteBool(A);
      }
      if (D != false) {
        output.WriteRawTag(40);
        output.WriteBool(D);
      }
      if (Rotation != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Rotation);
      }
      if (Id != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameID);
      }
      if (W != false) {
        size += 1 + 1;
      }
      if (S != false) {
        size += 1 + 1;
      }
      if (A != false) {
        size += 1 + 1;
      }
      if (D != false) {
        size += 1 + 1;
      }
      if (Rotation != 0F) {
        size += 1 + 4;
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInput_C_TO_S other) {
      if (other == null) {
        return;
      }
      if (other.FrameID != 0) {
        FrameID = other.FrameID;
      }
      if (other.W != false) {
        W = other.W;
      }
      if (other.S != false) {
        S = other.S;
      }
      if (other.A != false) {
        A = other.A;
      }
      if (other.D != false) {
        D = other.D;
      }
      if (other.Rotation != 0F) {
        Rotation = other.Rotation;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FrameID = input.ReadInt32();
            break;
          }
          case 16: {
            W = input.ReadBool();
            break;
          }
          case 24: {
            S = input.ReadBool();
            break;
          }
          case 32: {
            A = input.ReadBool();
            break;
          }
          case 40: {
            D = input.ReadBool();
            break;
          }
          case 53: {
            Rotation = input.ReadFloat();
            break;
          }
          case 56: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
