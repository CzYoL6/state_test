// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace UpdateShooterTest {

  /// <summary>Holder for reflection information generated from message.proto</summary>
  public static partial class MessageReflection {

    #region Descriptor
    /// <summary>File descriptor for message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1tZXNzYWdlLnByb3RvEhJVcGRhdGVfU2hvb3RlclRlc3QiNgoRUnR0TWVh",
            "c3VyZV9DX1RPX1MSEAoIcGFja2V0SWQYASABKAUSDwoHcnR0VGltZRgCIAEo",
            "ASIlChFSdHRNZWFzdXJlX1NfVE9fQxIQCghwYWNrZXRJZBgBIAEoBSLHAQoW",
            "SGl0QWNrbm93bGVkZ2VkX1NfVE9fQxIXCg9hdHRhY2tlcl9zbG90aWQYASAB",
            "KAUSFAoMZW5lbXlfc2xvdGlkGAIgASgFEg4KBmRhbWFnZRgDIAEoBRIMCgRk",
            "ZWFkGAQgASgIEg8KB2VfcG9zX3gYBSABKAISDwoHZV9wb3NfeRgGIAEoAhIN",
            "CgVlX3JvdBgHIAEoAhIPCgdhX3Bvc194GAggASgCEg8KB2FfcG9zX3kYCSAB",
            "KAISDQoFYV9yb3QYCiABKAIiLwoOV2VsY29tZV9TX1RPX0MSDgoGc2xvdGlk",
            "GAEgASgFEg0KBXRva2VuGAIgASgJIiMKEVBsYXllckxlZnRfU19UT19DEg4K",
            "BnNsb3RpZBgBIAEoBSIpChVQbGF5ZXJOaWNrbmFtZV9DX1RPX1MSEAoIbmlj",
            "a25hbWUYASABKAkiWwoSU3Bhd25QbGF5ZXJfU19UT19DEg4KBnNsb3RpZBgB",
            "IAEoBRIQCghuaWNrbmFtZRgCIAEoCRIJCgF4GAMgASgCEgkKAXkYBCABKAIS",
            "DQoFYW5nbGUYBSABKAIiEgoQU3RhcnRHYW1lX1NfVE9fQyJEChFQbGF5ZXJJ",
            "bmZvX1NfVE9fQxIJCgF4GAEgASgCEgkKAXkYAiABKAISDQoFYW5nbGUYAyAB",
            "KAISCgoCaWQYBCABKAUihgEKEVVwZGF0ZUluZm9fU19UT19DEhwKFGxhc3RQ",
            "cm9jZXNzZWRGcmFtZUlEGAEgASgFEjoKC3BsYXllckluZm9zGAIgAygLMiUu",
            "VXBkYXRlX1Nob290ZXJUZXN0LlBsYXllckluZm9fU19UT19DEhcKD2lucHV0",
            "QnVmZmVyU2l6ZRgDIAEoBSKEAQoSUGxheWVySW5wdXRfQ19UT19TEg8KB2Zy",
            "YW1lSUQYASABKAUSCQoBdxgCIAEoCBIJCgFzGAMgASgIEgkKAWEYBCABKAgS",
            "CQoBZBgFIAEoCBIOCgZtb3VzZVgYBiABKAISDgoGbW91c2VZGAcgASgCEhEK",
            "CW1vdXNlRG93bhgIIAEoCCJZChNQbGF5ZXJJbnB1dHNfQ19UT19TEjYKBmlu",
            "cHV0cxgBIAMoCzImLlVwZGF0ZV9TaG9vdGVyVGVzdC5QbGF5ZXJJbnB1dF9D",
            "X1RPX1MSCgoCaWQYAiABKAUqowIKBFRZUEUSFQoRdXBkYXRlSW5mb19TX1RP",
            "X0MQABIZChVwbGF5ZXJOaWNrbmFtZV9DX1RPX1MQARISCg53ZWxjb21lX1Nf",
            "VE9fQxACEhUKEXBsYXllckluZm9fU19UT19DEAMSFgoScGxheWVySW5wdXRf",
            "Q19UT19TEAQSFgoSc3Bhd25QbGF5ZXJfU19UT19DEAUSFAoQc3RhcnRHYW1l",
            "X1NfVE9fQxAGEhUKEXBsYXllckxlZnRfU19UT19DEAcSFwoTcGxheWVySW5w",
            "dXRzX0NfVE9fUxAIEhUKEXJ0dE1lYXN1cmVfQ19UT19TEAkSFQoRcnR0TWVh",
            "c3VyZV9TX1RPX0MQChIaChZoaXRBY2tub3dsZWRnZWRfU19UT19DEAtiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::UpdateShooterTest.TYPE), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::UpdateShooterTest.RttMeasure_C_TO_S), global::UpdateShooterTest.RttMeasure_C_TO_S.Parser, new[]{ "PacketId", "RttTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::UpdateShooterTest.RttMeasure_S_TO_C), global::UpdateShooterTest.RttMeasure_S_TO_C.Parser, new[]{ "PacketId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::UpdateShooterTest.HitAcknowledged_S_TO_C), global::UpdateShooterTest.HitAcknowledged_S_TO_C.Parser, new[]{ "AttackerSlotid", "EnemySlotid", "Damage", "Dead", "EPosX", "EPosY", "ERot", "APosX", "APosY", "ARot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::UpdateShooterTest.Welcome_S_TO_C), global::UpdateShooterTest.Welcome_S_TO_C.Parser, new[]{ "Slotid", "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::UpdateShooterTest.PlayerLeft_S_TO_C), global::UpdateShooterTest.PlayerLeft_S_TO_C.Parser, new[]{ "Slotid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::UpdateShooterTest.PlayerNickname_C_TO_S), global::UpdateShooterTest.PlayerNickname_C_TO_S.Parser, new[]{ "Nickname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::UpdateShooterTest.SpawnPlayer_S_TO_C), global::UpdateShooterTest.SpawnPlayer_S_TO_C.Parser, new[]{ "Slotid", "Nickname", "X", "Y", "Angle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::UpdateShooterTest.StartGame_S_TO_C), global::UpdateShooterTest.StartGame_S_TO_C.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::UpdateShooterTest.PlayerInfo_S_TO_C), global::UpdateShooterTest.PlayerInfo_S_TO_C.Parser, new[]{ "X", "Y", "Angle", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::UpdateShooterTest.UpdateInfo_S_TO_C), global::UpdateShooterTest.UpdateInfo_S_TO_C.Parser, new[]{ "LastProcessedFrameID", "PlayerInfos", "InputBufferSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::UpdateShooterTest.PlayerInput_C_TO_S), global::UpdateShooterTest.PlayerInput_C_TO_S.Parser, new[]{ "FrameID", "W", "S", "A", "D", "MouseX", "MouseY", "MouseDown" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::UpdateShooterTest.PlayerInputs_C_TO_S), global::UpdateShooterTest.PlayerInputs_C_TO_S.Parser, new[]{ "Inputs", "Id" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TYPE {
    [pbr::OriginalName("updateInfo_S_TO_C")] UpdateInfoSToC = 0,
    [pbr::OriginalName("playerNickname_C_TO_S")] PlayerNicknameCToS = 1,
    [pbr::OriginalName("welcome_S_TO_C")] WelcomeSToC = 2,
    [pbr::OriginalName("playerInfo_S_TO_C")] PlayerInfoSToC = 3,
    [pbr::OriginalName("playerInput_C_TO_S")] PlayerInputCToS = 4,
    [pbr::OriginalName("spawnPlayer_S_TO_C")] SpawnPlayerSToC = 5,
    [pbr::OriginalName("startGame_S_TO_C")] StartGameSToC = 6,
    [pbr::OriginalName("playerLeft_S_TO_C")] PlayerLeftSToC = 7,
    [pbr::OriginalName("playerInputs_C_TO_S")] PlayerInputsCToS = 8,
    [pbr::OriginalName("rttMeasure_C_TO_S")] RttMeasureCToS = 9,
    [pbr::OriginalName("rttMeasure_S_TO_C")] RttMeasureSToC = 10,
    [pbr::OriginalName("hitAcknowledged_S_TO_C")] HitAcknowledgedSToC = 11,
  }

  #endregion

  #region Messages
  public sealed partial class RttMeasure_C_TO_S : pb::IMessage<RttMeasure_C_TO_S> {
    private static readonly pb::MessageParser<RttMeasure_C_TO_S> _parser = new pb::MessageParser<RttMeasure_C_TO_S>(() => new RttMeasure_C_TO_S());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RttMeasure_C_TO_S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UpdateShooterTest.MessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RttMeasure_C_TO_S() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RttMeasure_C_TO_S(RttMeasure_C_TO_S other) : this() {
      packetId_ = other.packetId_;
      rttTime_ = other.rttTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RttMeasure_C_TO_S Clone() {
      return new RttMeasure_C_TO_S(this);
    }

    /// <summary>Field number for the "packetId" field.</summary>
    public const int PacketIdFieldNumber = 1;
    private int packetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PacketId {
      get { return packetId_; }
      set {
        packetId_ = value;
      }
    }

    /// <summary>Field number for the "rttTime" field.</summary>
    public const int RttTimeFieldNumber = 2;
    private double rttTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RttTime {
      get { return rttTime_; }
      set {
        rttTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RttMeasure_C_TO_S);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RttMeasure_C_TO_S other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PacketId != other.PacketId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RttTime, other.RttTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PacketId != 0) hash ^= PacketId.GetHashCode();
      if (RttTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RttTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PacketId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PacketId);
      }
      if (RttTime != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(RttTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PacketId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PacketId);
      }
      if (RttTime != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RttMeasure_C_TO_S other) {
      if (other == null) {
        return;
      }
      if (other.PacketId != 0) {
        PacketId = other.PacketId;
      }
      if (other.RttTime != 0D) {
        RttTime = other.RttTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PacketId = input.ReadInt32();
            break;
          }
          case 17: {
            RttTime = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RttMeasure_S_TO_C : pb::IMessage<RttMeasure_S_TO_C> {
    private static readonly pb::MessageParser<RttMeasure_S_TO_C> _parser = new pb::MessageParser<RttMeasure_S_TO_C>(() => new RttMeasure_S_TO_C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RttMeasure_S_TO_C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UpdateShooterTest.MessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RttMeasure_S_TO_C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RttMeasure_S_TO_C(RttMeasure_S_TO_C other) : this() {
      packetId_ = other.packetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RttMeasure_S_TO_C Clone() {
      return new RttMeasure_S_TO_C(this);
    }

    /// <summary>Field number for the "packetId" field.</summary>
    public const int PacketIdFieldNumber = 1;
    private int packetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PacketId {
      get { return packetId_; }
      set {
        packetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RttMeasure_S_TO_C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RttMeasure_S_TO_C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PacketId != other.PacketId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PacketId != 0) hash ^= PacketId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PacketId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PacketId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PacketId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PacketId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RttMeasure_S_TO_C other) {
      if (other == null) {
        return;
      }
      if (other.PacketId != 0) {
        PacketId = other.PacketId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PacketId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HitAcknowledged_S_TO_C : pb::IMessage<HitAcknowledged_S_TO_C> {
    private static readonly pb::MessageParser<HitAcknowledged_S_TO_C> _parser = new pb::MessageParser<HitAcknowledged_S_TO_C>(() => new HitAcknowledged_S_TO_C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HitAcknowledged_S_TO_C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UpdateShooterTest.MessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitAcknowledged_S_TO_C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitAcknowledged_S_TO_C(HitAcknowledged_S_TO_C other) : this() {
      attackerSlotid_ = other.attackerSlotid_;
      enemySlotid_ = other.enemySlotid_;
      damage_ = other.damage_;
      dead_ = other.dead_;
      ePosX_ = other.ePosX_;
      ePosY_ = other.ePosY_;
      eRot_ = other.eRot_;
      aPosX_ = other.aPosX_;
      aPosY_ = other.aPosY_;
      aRot_ = other.aRot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitAcknowledged_S_TO_C Clone() {
      return new HitAcknowledged_S_TO_C(this);
    }

    /// <summary>Field number for the "attacker_slotid" field.</summary>
    public const int AttackerSlotidFieldNumber = 1;
    private int attackerSlotid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerSlotid {
      get { return attackerSlotid_; }
      set {
        attackerSlotid_ = value;
      }
    }

    /// <summary>Field number for the "enemy_slotid" field.</summary>
    public const int EnemySlotidFieldNumber = 2;
    private int enemySlotid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnemySlotid {
      get { return enemySlotid_; }
      set {
        enemySlotid_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 3;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "dead" field.</summary>
    public const int DeadFieldNumber = 4;
    private bool dead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Dead {
      get { return dead_; }
      set {
        dead_ = value;
      }
    }

    /// <summary>Field number for the "e_pos_x" field.</summary>
    public const int EPosXFieldNumber = 5;
    private float ePosX_;
    /// <summary>
    ///debug:
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EPosX {
      get { return ePosX_; }
      set {
        ePosX_ = value;
      }
    }

    /// <summary>Field number for the "e_pos_y" field.</summary>
    public const int EPosYFieldNumber = 6;
    private float ePosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EPosY {
      get { return ePosY_; }
      set {
        ePosY_ = value;
      }
    }

    /// <summary>Field number for the "e_rot" field.</summary>
    public const int ERotFieldNumber = 7;
    private float eRot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ERot {
      get { return eRot_; }
      set {
        eRot_ = value;
      }
    }

    /// <summary>Field number for the "a_pos_x" field.</summary>
    public const int APosXFieldNumber = 8;
    private float aPosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float APosX {
      get { return aPosX_; }
      set {
        aPosX_ = value;
      }
    }

    /// <summary>Field number for the "a_pos_y" field.</summary>
    public const int APosYFieldNumber = 9;
    private float aPosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float APosY {
      get { return aPosY_; }
      set {
        aPosY_ = value;
      }
    }

    /// <summary>Field number for the "a_rot" field.</summary>
    public const int ARotFieldNumber = 10;
    private float aRot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ARot {
      get { return aRot_; }
      set {
        aRot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HitAcknowledged_S_TO_C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HitAcknowledged_S_TO_C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttackerSlotid != other.AttackerSlotid) return false;
      if (EnemySlotid != other.EnemySlotid) return false;
      if (Damage != other.Damage) return false;
      if (Dead != other.Dead) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EPosX, other.EPosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EPosY, other.EPosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ERot, other.ERot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(APosX, other.APosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(APosY, other.APosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ARot, other.ARot)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttackerSlotid != 0) hash ^= AttackerSlotid.GetHashCode();
      if (EnemySlotid != 0) hash ^= EnemySlotid.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (Dead != false) hash ^= Dead.GetHashCode();
      if (EPosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EPosX);
      if (EPosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EPosY);
      if (ERot != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ERot);
      if (APosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(APosX);
      if (APosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(APosY);
      if (ARot != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ARot);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttackerSlotid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttackerSlotid);
      }
      if (EnemySlotid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EnemySlotid);
      }
      if (Damage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Damage);
      }
      if (Dead != false) {
        output.WriteRawTag(32);
        output.WriteBool(Dead);
      }
      if (EPosX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(EPosX);
      }
      if (EPosY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(EPosY);
      }
      if (ERot != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(ERot);
      }
      if (APosX != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(APosX);
      }
      if (APosY != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(APosY);
      }
      if (ARot != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(ARot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttackerSlotid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackerSlotid);
      }
      if (EnemySlotid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnemySlotid);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (Dead != false) {
        size += 1 + 1;
      }
      if (EPosX != 0F) {
        size += 1 + 4;
      }
      if (EPosY != 0F) {
        size += 1 + 4;
      }
      if (ERot != 0F) {
        size += 1 + 4;
      }
      if (APosX != 0F) {
        size += 1 + 4;
      }
      if (APosY != 0F) {
        size += 1 + 4;
      }
      if (ARot != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HitAcknowledged_S_TO_C other) {
      if (other == null) {
        return;
      }
      if (other.AttackerSlotid != 0) {
        AttackerSlotid = other.AttackerSlotid;
      }
      if (other.EnemySlotid != 0) {
        EnemySlotid = other.EnemySlotid;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.Dead != false) {
        Dead = other.Dead;
      }
      if (other.EPosX != 0F) {
        EPosX = other.EPosX;
      }
      if (other.EPosY != 0F) {
        EPosY = other.EPosY;
      }
      if (other.ERot != 0F) {
        ERot = other.ERot;
      }
      if (other.APosX != 0F) {
        APosX = other.APosX;
      }
      if (other.APosY != 0F) {
        APosY = other.APosY;
      }
      if (other.ARot != 0F) {
        ARot = other.ARot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AttackerSlotid = input.ReadInt32();
            break;
          }
          case 16: {
            EnemySlotid = input.ReadInt32();
            break;
          }
          case 24: {
            Damage = input.ReadInt32();
            break;
          }
          case 32: {
            Dead = input.ReadBool();
            break;
          }
          case 45: {
            EPosX = input.ReadFloat();
            break;
          }
          case 53: {
            EPosY = input.ReadFloat();
            break;
          }
          case 61: {
            ERot = input.ReadFloat();
            break;
          }
          case 69: {
            APosX = input.ReadFloat();
            break;
          }
          case 77: {
            APosY = input.ReadFloat();
            break;
          }
          case 85: {
            ARot = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Welcome_S_TO_C : pb::IMessage<Welcome_S_TO_C> {
    private static readonly pb::MessageParser<Welcome_S_TO_C> _parser = new pb::MessageParser<Welcome_S_TO_C>(() => new Welcome_S_TO_C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Welcome_S_TO_C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UpdateShooterTest.MessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Welcome_S_TO_C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Welcome_S_TO_C(Welcome_S_TO_C other) : this() {
      slotid_ = other.slotid_;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Welcome_S_TO_C Clone() {
      return new Welcome_S_TO_C(this);
    }

    /// <summary>Field number for the "slotid" field.</summary>
    public const int SlotidFieldNumber = 1;
    private int slotid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Slotid {
      get { return slotid_; }
      set {
        slotid_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Welcome_S_TO_C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Welcome_S_TO_C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Slotid != other.Slotid) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Slotid != 0) hash ^= Slotid.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Slotid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Slotid);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Slotid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slotid);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Welcome_S_TO_C other) {
      if (other == null) {
        return;
      }
      if (other.Slotid != 0) {
        Slotid = other.Slotid;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Slotid = input.ReadInt32();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerLeft_S_TO_C : pb::IMessage<PlayerLeft_S_TO_C> {
    private static readonly pb::MessageParser<PlayerLeft_S_TO_C> _parser = new pb::MessageParser<PlayerLeft_S_TO_C>(() => new PlayerLeft_S_TO_C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerLeft_S_TO_C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UpdateShooterTest.MessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLeft_S_TO_C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLeft_S_TO_C(PlayerLeft_S_TO_C other) : this() {
      slotid_ = other.slotid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLeft_S_TO_C Clone() {
      return new PlayerLeft_S_TO_C(this);
    }

    /// <summary>Field number for the "slotid" field.</summary>
    public const int SlotidFieldNumber = 1;
    private int slotid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Slotid {
      get { return slotid_; }
      set {
        slotid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerLeft_S_TO_C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerLeft_S_TO_C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Slotid != other.Slotid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Slotid != 0) hash ^= Slotid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Slotid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Slotid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Slotid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slotid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerLeft_S_TO_C other) {
      if (other == null) {
        return;
      }
      if (other.Slotid != 0) {
        Slotid = other.Slotid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Slotid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerNickname_C_TO_S : pb::IMessage<PlayerNickname_C_TO_S> {
    private static readonly pb::MessageParser<PlayerNickname_C_TO_S> _parser = new pb::MessageParser<PlayerNickname_C_TO_S>(() => new PlayerNickname_C_TO_S());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerNickname_C_TO_S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UpdateShooterTest.MessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerNickname_C_TO_S() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerNickname_C_TO_S(PlayerNickname_C_TO_S other) : this() {
      nickname_ = other.nickname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerNickname_C_TO_S Clone() {
      return new PlayerNickname_C_TO_S(this);
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 1;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerNickname_C_TO_S);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerNickname_C_TO_S other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nickname != other.Nickname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nickname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Nickname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerNickname_C_TO_S other) {
      if (other == null) {
        return;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Nickname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpawnPlayer_S_TO_C : pb::IMessage<SpawnPlayer_S_TO_C> {
    private static readonly pb::MessageParser<SpawnPlayer_S_TO_C> _parser = new pb::MessageParser<SpawnPlayer_S_TO_C>(() => new SpawnPlayer_S_TO_C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpawnPlayer_S_TO_C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UpdateShooterTest.MessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnPlayer_S_TO_C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnPlayer_S_TO_C(SpawnPlayer_S_TO_C other) : this() {
      slotid_ = other.slotid_;
      nickname_ = other.nickname_;
      x_ = other.x_;
      y_ = other.y_;
      angle_ = other.angle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnPlayer_S_TO_C Clone() {
      return new SpawnPlayer_S_TO_C(this);
    }

    /// <summary>Field number for the "slotid" field.</summary>
    public const int SlotidFieldNumber = 1;
    private int slotid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Slotid {
      get { return slotid_; }
      set {
        slotid_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 2;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 3;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 4;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 5;
    private float angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpawnPlayer_S_TO_C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpawnPlayer_S_TO_C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Slotid != other.Slotid) return false;
      if (Nickname != other.Nickname) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Slotid != 0) hash ^= Slotid.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Slotid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Slotid);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nickname);
      }
      if (X != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Y);
      }
      if (Angle != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Angle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Slotid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slotid);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Angle != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpawnPlayer_S_TO_C other) {
      if (other == null) {
        return;
      }
      if (other.Slotid != 0) {
        Slotid = other.Slotid;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Slotid = input.ReadInt32();
            break;
          }
          case 18: {
            Nickname = input.ReadString();
            break;
          }
          case 29: {
            X = input.ReadFloat();
            break;
          }
          case 37: {
            Y = input.ReadFloat();
            break;
          }
          case 45: {
            Angle = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartGame_S_TO_C : pb::IMessage<StartGame_S_TO_C> {
    private static readonly pb::MessageParser<StartGame_S_TO_C> _parser = new pb::MessageParser<StartGame_S_TO_C>(() => new StartGame_S_TO_C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartGame_S_TO_C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UpdateShooterTest.MessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGame_S_TO_C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGame_S_TO_C(StartGame_S_TO_C other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGame_S_TO_C Clone() {
      return new StartGame_S_TO_C(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartGame_S_TO_C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartGame_S_TO_C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartGame_S_TO_C other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PlayerInfo_S_TO_C : pb::IMessage<PlayerInfo_S_TO_C> {
    private static readonly pb::MessageParser<PlayerInfo_S_TO_C> _parser = new pb::MessageParser<PlayerInfo_S_TO_C>(() => new PlayerInfo_S_TO_C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo_S_TO_C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UpdateShooterTest.MessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo_S_TO_C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo_S_TO_C(PlayerInfo_S_TO_C other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      angle_ = other.angle_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo_S_TO_C Clone() {
      return new PlayerInfo_S_TO_C(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 3;
    private float angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 4;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo_S_TO_C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo_S_TO_C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Angle != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Angle);
      }
      if (Id != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Angle != 0F) {
        size += 1 + 4;
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo_S_TO_C other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Angle = input.ReadFloat();
            break;
          }
          case 32: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateInfo_S_TO_C : pb::IMessage<UpdateInfo_S_TO_C> {
    private static readonly pb::MessageParser<UpdateInfo_S_TO_C> _parser = new pb::MessageParser<UpdateInfo_S_TO_C>(() => new UpdateInfo_S_TO_C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateInfo_S_TO_C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UpdateShooterTest.MessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInfo_S_TO_C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInfo_S_TO_C(UpdateInfo_S_TO_C other) : this() {
      lastProcessedFrameID_ = other.lastProcessedFrameID_;
      playerInfos_ = other.playerInfos_.Clone();
      inputBufferSize_ = other.inputBufferSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInfo_S_TO_C Clone() {
      return new UpdateInfo_S_TO_C(this);
    }

    /// <summary>Field number for the "lastProcessedFrameID" field.</summary>
    public const int LastProcessedFrameIDFieldNumber = 1;
    private int lastProcessedFrameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastProcessedFrameID {
      get { return lastProcessedFrameID_; }
      set {
        lastProcessedFrameID_ = value;
      }
    }

    /// <summary>Field number for the "playerInfos" field.</summary>
    public const int PlayerInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::UpdateShooterTest.PlayerInfo_S_TO_C> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(18, global::UpdateShooterTest.PlayerInfo_S_TO_C.Parser);
    private readonly pbc::RepeatedField<global::UpdateShooterTest.PlayerInfo_S_TO_C> playerInfos_ = new pbc::RepeatedField<global::UpdateShooterTest.PlayerInfo_S_TO_C>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UpdateShooterTest.PlayerInfo_S_TO_C> PlayerInfos {
      get { return playerInfos_; }
    }

    /// <summary>Field number for the "inputBufferSize" field.</summary>
    public const int InputBufferSizeFieldNumber = 3;
    private int inputBufferSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputBufferSize {
      get { return inputBufferSize_; }
      set {
        inputBufferSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateInfo_S_TO_C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateInfo_S_TO_C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastProcessedFrameID != other.LastProcessedFrameID) return false;
      if(!playerInfos_.Equals(other.playerInfos_)) return false;
      if (InputBufferSize != other.InputBufferSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastProcessedFrameID != 0) hash ^= LastProcessedFrameID.GetHashCode();
      hash ^= playerInfos_.GetHashCode();
      if (InputBufferSize != 0) hash ^= InputBufferSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastProcessedFrameID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LastProcessedFrameID);
      }
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      if (InputBufferSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(InputBufferSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastProcessedFrameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastProcessedFrameID);
      }
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      if (InputBufferSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputBufferSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateInfo_S_TO_C other) {
      if (other == null) {
        return;
      }
      if (other.LastProcessedFrameID != 0) {
        LastProcessedFrameID = other.LastProcessedFrameID;
      }
      playerInfos_.Add(other.playerInfos_);
      if (other.InputBufferSize != 0) {
        InputBufferSize = other.InputBufferSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LastProcessedFrameID = input.ReadInt32();
            break;
          }
          case 18: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
          case 24: {
            InputBufferSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInput_C_TO_S : pb::IMessage<PlayerInput_C_TO_S> {
    private static readonly pb::MessageParser<PlayerInput_C_TO_S> _parser = new pb::MessageParser<PlayerInput_C_TO_S>(() => new PlayerInput_C_TO_S());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInput_C_TO_S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UpdateShooterTest.MessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInput_C_TO_S() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInput_C_TO_S(PlayerInput_C_TO_S other) : this() {
      frameID_ = other.frameID_;
      w_ = other.w_;
      s_ = other.s_;
      a_ = other.a_;
      d_ = other.d_;
      mouseX_ = other.mouseX_;
      mouseY_ = other.mouseY_;
      mouseDown_ = other.mouseDown_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInput_C_TO_S Clone() {
      return new PlayerInput_C_TO_S(this);
    }

    /// <summary>Field number for the "frameID" field.</summary>
    public const int FrameIDFieldNumber = 1;
    private int frameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameID {
      get { return frameID_; }
      set {
        frameID_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 2;
    private bool w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 3;
    private bool s_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool S {
      get { return s_; }
      set {
        s_ = value;
      }
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 4;
    private bool a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "d" field.</summary>
    public const int DFieldNumber = 5;
    private bool d_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool D {
      get { return d_; }
      set {
        d_ = value;
      }
    }

    /// <summary>Field number for the "mouseX" field.</summary>
    public const int MouseXFieldNumber = 6;
    private float mouseX_;
    /// <summary>
    /// float rotation = 6;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouseX {
      get { return mouseX_; }
      set {
        mouseX_ = value;
      }
    }

    /// <summary>Field number for the "mouseY" field.</summary>
    public const int MouseYFieldNumber = 7;
    private float mouseY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouseY {
      get { return mouseY_; }
      set {
        mouseY_ = value;
      }
    }

    /// <summary>Field number for the "mouseDown" field.</summary>
    public const int MouseDownFieldNumber = 8;
    private bool mouseDown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MouseDown {
      get { return mouseDown_; }
      set {
        mouseDown_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInput_C_TO_S);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInput_C_TO_S other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameID != other.FrameID) return false;
      if (W != other.W) return false;
      if (S != other.S) return false;
      if (A != other.A) return false;
      if (D != other.D) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouseX, other.MouseX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouseY, other.MouseY)) return false;
      if (MouseDown != other.MouseDown) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameID != 0) hash ^= FrameID.GetHashCode();
      if (W != false) hash ^= W.GetHashCode();
      if (S != false) hash ^= S.GetHashCode();
      if (A != false) hash ^= A.GetHashCode();
      if (D != false) hash ^= D.GetHashCode();
      if (MouseX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouseX);
      if (MouseY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouseY);
      if (MouseDown != false) hash ^= MouseDown.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameID);
      }
      if (W != false) {
        output.WriteRawTag(16);
        output.WriteBool(W);
      }
      if (S != false) {
        output.WriteRawTag(24);
        output.WriteBool(S);
      }
      if (A != false) {
        output.WriteRawTag(32);
        output.WriteBool(A);
      }
      if (D != false) {
        output.WriteRawTag(40);
        output.WriteBool(D);
      }
      if (MouseX != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(MouseX);
      }
      if (MouseY != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(MouseY);
      }
      if (MouseDown != false) {
        output.WriteRawTag(64);
        output.WriteBool(MouseDown);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameID);
      }
      if (W != false) {
        size += 1 + 1;
      }
      if (S != false) {
        size += 1 + 1;
      }
      if (A != false) {
        size += 1 + 1;
      }
      if (D != false) {
        size += 1 + 1;
      }
      if (MouseX != 0F) {
        size += 1 + 4;
      }
      if (MouseY != 0F) {
        size += 1 + 4;
      }
      if (MouseDown != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInput_C_TO_S other) {
      if (other == null) {
        return;
      }
      if (other.FrameID != 0) {
        FrameID = other.FrameID;
      }
      if (other.W != false) {
        W = other.W;
      }
      if (other.S != false) {
        S = other.S;
      }
      if (other.A != false) {
        A = other.A;
      }
      if (other.D != false) {
        D = other.D;
      }
      if (other.MouseX != 0F) {
        MouseX = other.MouseX;
      }
      if (other.MouseY != 0F) {
        MouseY = other.MouseY;
      }
      if (other.MouseDown != false) {
        MouseDown = other.MouseDown;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FrameID = input.ReadInt32();
            break;
          }
          case 16: {
            W = input.ReadBool();
            break;
          }
          case 24: {
            S = input.ReadBool();
            break;
          }
          case 32: {
            A = input.ReadBool();
            break;
          }
          case 40: {
            D = input.ReadBool();
            break;
          }
          case 53: {
            MouseX = input.ReadFloat();
            break;
          }
          case 61: {
            MouseY = input.ReadFloat();
            break;
          }
          case 64: {
            MouseDown = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInputs_C_TO_S : pb::IMessage<PlayerInputs_C_TO_S> {
    private static readonly pb::MessageParser<PlayerInputs_C_TO_S> _parser = new pb::MessageParser<PlayerInputs_C_TO_S>(() => new PlayerInputs_C_TO_S());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInputs_C_TO_S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UpdateShooterTest.MessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInputs_C_TO_S() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInputs_C_TO_S(PlayerInputs_C_TO_S other) : this() {
      inputs_ = other.inputs_.Clone();
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInputs_C_TO_S Clone() {
      return new PlayerInputs_C_TO_S(this);
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::UpdateShooterTest.PlayerInput_C_TO_S> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(10, global::UpdateShooterTest.PlayerInput_C_TO_S.Parser);
    private readonly pbc::RepeatedField<global::UpdateShooterTest.PlayerInput_C_TO_S> inputs_ = new pbc::RepeatedField<global::UpdateShooterTest.PlayerInput_C_TO_S>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UpdateShooterTest.PlayerInput_C_TO_S> Inputs {
      get { return inputs_; }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInputs_C_TO_S);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInputs_C_TO_S other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!inputs_.Equals(other.inputs_)) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= inputs_.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      inputs_.WriteTo(output, _repeated_inputs_codec);
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInputs_C_TO_S other) {
      if (other == null) {
        return;
      }
      inputs_.Add(other.inputs_);
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
