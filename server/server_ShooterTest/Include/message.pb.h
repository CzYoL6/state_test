// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace Update_ShooterTest {
class KcpConnectReq_C_S;
struct KcpConnectReq_C_SDefaultTypeInternal;
extern KcpConnectReq_C_SDefaultTypeInternal _KcpConnectReq_C_S_default_instance_;
class KcpWelcome_S_C;
struct KcpWelcome_S_CDefaultTypeInternal;
extern KcpWelcome_S_CDefaultTypeInternal _KcpWelcome_S_C_default_instance_;
class PlayerInfo_S_TO_C;
struct PlayerInfo_S_TO_CDefaultTypeInternal;
extern PlayerInfo_S_TO_CDefaultTypeInternal _PlayerInfo_S_TO_C_default_instance_;
class PlayerInput_C_TO_S;
struct PlayerInput_C_TO_SDefaultTypeInternal;
extern PlayerInput_C_TO_SDefaultTypeInternal _PlayerInput_C_TO_S_default_instance_;
class UpdateInfo_S_TO_C;
struct UpdateInfo_S_TO_CDefaultTypeInternal;
extern UpdateInfo_S_TO_CDefaultTypeInternal _UpdateInfo_S_TO_C_default_instance_;
}  // namespace Update_ShooterTest
PROTOBUF_NAMESPACE_OPEN
template<> ::Update_ShooterTest::KcpConnectReq_C_S* Arena::CreateMaybeMessage<::Update_ShooterTest::KcpConnectReq_C_S>(Arena*);
template<> ::Update_ShooterTest::KcpWelcome_S_C* Arena::CreateMaybeMessage<::Update_ShooterTest::KcpWelcome_S_C>(Arena*);
template<> ::Update_ShooterTest::PlayerInfo_S_TO_C* Arena::CreateMaybeMessage<::Update_ShooterTest::PlayerInfo_S_TO_C>(Arena*);
template<> ::Update_ShooterTest::PlayerInput_C_TO_S* Arena::CreateMaybeMessage<::Update_ShooterTest::PlayerInput_C_TO_S>(Arena*);
template<> ::Update_ShooterTest::UpdateInfo_S_TO_C* Arena::CreateMaybeMessage<::Update_ShooterTest::UpdateInfo_S_TO_C>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Update_ShooterTest {

enum TYPE : int {
  updateInfo_S_TO_C = 0,
  kcpConnectionReq = 1,
  kcpWelcome = 2,
  playerInfo_S_TO_C = 3,
  playerInput_C_TO_S = 4,
  TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TYPE_IsValid(int value);
constexpr TYPE TYPE_MIN = updateInfo_S_TO_C;
constexpr TYPE TYPE_MAX = playerInput_C_TO_S;
constexpr int TYPE_ARRAYSIZE = TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TYPE_descriptor();
template<typename T>
inline const std::string& TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TYPE_descriptor(), enum_t_value);
}
inline bool TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TYPE>(
    TYPE_descriptor(), name, value);
}
// ===================================================================

class KcpWelcome_S_C final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Update_ShooterTest.KcpWelcome_S_C) */ {
 public:
  inline KcpWelcome_S_C() : KcpWelcome_S_C(nullptr) {}
  ~KcpWelcome_S_C() override;
  explicit constexpr KcpWelcome_S_C(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KcpWelcome_S_C(const KcpWelcome_S_C& from);
  KcpWelcome_S_C(KcpWelcome_S_C&& from) noexcept
    : KcpWelcome_S_C() {
    *this = ::std::move(from);
  }

  inline KcpWelcome_S_C& operator=(const KcpWelcome_S_C& from) {
    CopyFrom(from);
    return *this;
  }
  inline KcpWelcome_S_C& operator=(KcpWelcome_S_C&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KcpWelcome_S_C& default_instance() {
    return *internal_default_instance();
  }
  static inline const KcpWelcome_S_C* internal_default_instance() {
    return reinterpret_cast<const KcpWelcome_S_C*>(
               &_KcpWelcome_S_C_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KcpWelcome_S_C& a, KcpWelcome_S_C& b) {
    a.Swap(&b);
  }
  inline void Swap(KcpWelcome_S_C* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KcpWelcome_S_C* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KcpWelcome_S_C* New() const final {
    return new KcpWelcome_S_C();
  }

  KcpWelcome_S_C* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KcpWelcome_S_C>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KcpWelcome_S_C& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KcpWelcome_S_C& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KcpWelcome_S_C* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Update_ShooterTest.KcpWelcome_S_C";
  }
  protected:
  explicit KcpWelcome_S_C(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotidFieldNumber = 1,
  };
  // int32 slotid = 1;
  void clear_slotid();
  ::PROTOBUF_NAMESPACE_ID::int32 slotid() const;
  void set_slotid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slotid() const;
  void _internal_set_slotid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Update_ShooterTest.KcpWelcome_S_C)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 slotid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo_S_TO_C final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Update_ShooterTest.PlayerInfo_S_TO_C) */ {
 public:
  inline PlayerInfo_S_TO_C() : PlayerInfo_S_TO_C(nullptr) {}
  ~PlayerInfo_S_TO_C() override;
  explicit constexpr PlayerInfo_S_TO_C(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInfo_S_TO_C(const PlayerInfo_S_TO_C& from);
  PlayerInfo_S_TO_C(PlayerInfo_S_TO_C&& from) noexcept
    : PlayerInfo_S_TO_C() {
    *this = ::std::move(from);
  }

  inline PlayerInfo_S_TO_C& operator=(const PlayerInfo_S_TO_C& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo_S_TO_C& operator=(PlayerInfo_S_TO_C&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInfo_S_TO_C& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInfo_S_TO_C* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo_S_TO_C*>(
               &_PlayerInfo_S_TO_C_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerInfo_S_TO_C& a, PlayerInfo_S_TO_C& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo_S_TO_C* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo_S_TO_C* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfo_S_TO_C* New() const final {
    return new PlayerInfo_S_TO_C();
  }

  PlayerInfo_S_TO_C* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfo_S_TO_C>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerInfo_S_TO_C& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerInfo_S_TO_C& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo_S_TO_C* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Update_ShooterTest.PlayerInfo_S_TO_C";
  }
  protected:
  explicit PlayerInfo_S_TO_C(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kAngleFieldNumber = 3,
    kIdFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float angle = 3;
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // int32 id = 4;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Update_ShooterTest.PlayerInfo_S_TO_C)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class UpdateInfo_S_TO_C final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Update_ShooterTest.UpdateInfo_S_TO_C) */ {
 public:
  inline UpdateInfo_S_TO_C() : UpdateInfo_S_TO_C(nullptr) {}
  ~UpdateInfo_S_TO_C() override;
  explicit constexpr UpdateInfo_S_TO_C(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateInfo_S_TO_C(const UpdateInfo_S_TO_C& from);
  UpdateInfo_S_TO_C(UpdateInfo_S_TO_C&& from) noexcept
    : UpdateInfo_S_TO_C() {
    *this = ::std::move(from);
  }

  inline UpdateInfo_S_TO_C& operator=(const UpdateInfo_S_TO_C& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateInfo_S_TO_C& operator=(UpdateInfo_S_TO_C&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateInfo_S_TO_C& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateInfo_S_TO_C* internal_default_instance() {
    return reinterpret_cast<const UpdateInfo_S_TO_C*>(
               &_UpdateInfo_S_TO_C_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateInfo_S_TO_C& a, UpdateInfo_S_TO_C& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateInfo_S_TO_C* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateInfo_S_TO_C* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateInfo_S_TO_C* New() const final {
    return new UpdateInfo_S_TO_C();
  }

  UpdateInfo_S_TO_C* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateInfo_S_TO_C>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateInfo_S_TO_C& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateInfo_S_TO_C& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateInfo_S_TO_C* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Update_ShooterTest.UpdateInfo_S_TO_C";
  }
  protected:
  explicit UpdateInfo_S_TO_C(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfosFieldNumber = 2,
    kLastProcessedFrameIDFieldNumber = 1,
    kInputBufferSizeFieldNumber = 3,
  };
  // repeated .Update_ShooterTest.PlayerInfo_S_TO_C playerInfos = 2;
  int playerinfos_size() const;
  private:
  int _internal_playerinfos_size() const;
  public:
  void clear_playerinfos();
  ::Update_ShooterTest::PlayerInfo_S_TO_C* mutable_playerinfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Update_ShooterTest::PlayerInfo_S_TO_C >*
      mutable_playerinfos();
  private:
  const ::Update_ShooterTest::PlayerInfo_S_TO_C& _internal_playerinfos(int index) const;
  ::Update_ShooterTest::PlayerInfo_S_TO_C* _internal_add_playerinfos();
  public:
  const ::Update_ShooterTest::PlayerInfo_S_TO_C& playerinfos(int index) const;
  ::Update_ShooterTest::PlayerInfo_S_TO_C* add_playerinfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Update_ShooterTest::PlayerInfo_S_TO_C >&
      playerinfos() const;

  // int32 lastProcessedFrameID = 1;
  void clear_lastprocessedframeid();
  ::PROTOBUF_NAMESPACE_ID::int32 lastprocessedframeid() const;
  void set_lastprocessedframeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lastprocessedframeid() const;
  void _internal_set_lastprocessedframeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 inputBufferSize = 3;
  void clear_inputbuffersize();
  ::PROTOBUF_NAMESPACE_ID::int32 inputbuffersize() const;
  void set_inputbuffersize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inputbuffersize() const;
  void _internal_set_inputbuffersize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Update_ShooterTest.UpdateInfo_S_TO_C)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Update_ShooterTest::PlayerInfo_S_TO_C > playerinfos_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastprocessedframeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 inputbuffersize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class KcpConnectReq_C_S final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Update_ShooterTest.KcpConnectReq_C_S) */ {
 public:
  inline KcpConnectReq_C_S() : KcpConnectReq_C_S(nullptr) {}
  explicit constexpr KcpConnectReq_C_S(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KcpConnectReq_C_S(const KcpConnectReq_C_S& from);
  KcpConnectReq_C_S(KcpConnectReq_C_S&& from) noexcept
    : KcpConnectReq_C_S() {
    *this = ::std::move(from);
  }

  inline KcpConnectReq_C_S& operator=(const KcpConnectReq_C_S& from) {
    CopyFrom(from);
    return *this;
  }
  inline KcpConnectReq_C_S& operator=(KcpConnectReq_C_S&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KcpConnectReq_C_S& default_instance() {
    return *internal_default_instance();
  }
  static inline const KcpConnectReq_C_S* internal_default_instance() {
    return reinterpret_cast<const KcpConnectReq_C_S*>(
               &_KcpConnectReq_C_S_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KcpConnectReq_C_S& a, KcpConnectReq_C_S& b) {
    a.Swap(&b);
  }
  inline void Swap(KcpConnectReq_C_S* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KcpConnectReq_C_S* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KcpConnectReq_C_S* New() const final {
    return new KcpConnectReq_C_S();
  }

  KcpConnectReq_C_S* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KcpConnectReq_C_S>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const KcpConnectReq_C_S& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const KcpConnectReq_C_S& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Update_ShooterTest.KcpConnectReq_C_S";
  }
  protected:
  explicit KcpConnectReq_C_S(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Update_ShooterTest.KcpConnectReq_C_S)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PlayerInput_C_TO_S final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Update_ShooterTest.PlayerInput_C_TO_S) */ {
 public:
  inline PlayerInput_C_TO_S() : PlayerInput_C_TO_S(nullptr) {}
  ~PlayerInput_C_TO_S() override;
  explicit constexpr PlayerInput_C_TO_S(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInput_C_TO_S(const PlayerInput_C_TO_S& from);
  PlayerInput_C_TO_S(PlayerInput_C_TO_S&& from) noexcept
    : PlayerInput_C_TO_S() {
    *this = ::std::move(from);
  }

  inline PlayerInput_C_TO_S& operator=(const PlayerInput_C_TO_S& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInput_C_TO_S& operator=(PlayerInput_C_TO_S&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInput_C_TO_S& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInput_C_TO_S* internal_default_instance() {
    return reinterpret_cast<const PlayerInput_C_TO_S*>(
               &_PlayerInput_C_TO_S_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerInput_C_TO_S& a, PlayerInput_C_TO_S& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInput_C_TO_S* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInput_C_TO_S* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInput_C_TO_S* New() const final {
    return new PlayerInput_C_TO_S();
  }

  PlayerInput_C_TO_S* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInput_C_TO_S>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerInput_C_TO_S& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerInput_C_TO_S& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInput_C_TO_S* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Update_ShooterTest.PlayerInput_C_TO_S";
  }
  protected:
  explicit PlayerInput_C_TO_S(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameIDFieldNumber = 1,
    kWFieldNumber = 2,
    kSFieldNumber = 3,
    kAFieldNumber = 4,
    kDFieldNumber = 5,
    kRotationFieldNumber = 6,
    kIdFieldNumber = 7,
  };
  // int32 frameID = 1;
  void clear_frameid();
  ::PROTOBUF_NAMESPACE_ID::int32 frameid() const;
  void set_frameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frameid() const;
  void _internal_set_frameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool w = 2;
  void clear_w();
  bool w() const;
  void set_w(bool value);
  private:
  bool _internal_w() const;
  void _internal_set_w(bool value);
  public:

  // bool s = 3;
  void clear_s();
  bool s() const;
  void set_s(bool value);
  private:
  bool _internal_s() const;
  void _internal_set_s(bool value);
  public:

  // bool a = 4;
  void clear_a();
  bool a() const;
  void set_a(bool value);
  private:
  bool _internal_a() const;
  void _internal_set_a(bool value);
  public:

  // bool d = 5;
  void clear_d();
  bool d() const;
  void set_d(bool value);
  private:
  bool _internal_d() const;
  void _internal_set_d(bool value);
  public:

  // float rotation = 6;
  void clear_rotation();
  float rotation() const;
  void set_rotation(float value);
  private:
  float _internal_rotation() const;
  void _internal_set_rotation(float value);
  public:

  // int32 id = 7;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Update_ShooterTest.PlayerInput_C_TO_S)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 frameid_;
  bool w_;
  bool s_;
  bool a_;
  bool d_;
  float rotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KcpWelcome_S_C

// int32 slotid = 1;
inline void KcpWelcome_S_C::clear_slotid() {
  slotid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KcpWelcome_S_C::_internal_slotid() const {
  return slotid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KcpWelcome_S_C::slotid() const {
  // @@protoc_insertion_point(field_get:Update_ShooterTest.KcpWelcome_S_C.slotid)
  return _internal_slotid();
}
inline void KcpWelcome_S_C::_internal_set_slotid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  slotid_ = value;
}
inline void KcpWelcome_S_C::set_slotid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slotid(value);
  // @@protoc_insertion_point(field_set:Update_ShooterTest.KcpWelcome_S_C.slotid)
}

// -------------------------------------------------------------------

// PlayerInfo_S_TO_C

// float x = 1;
inline void PlayerInfo_S_TO_C::clear_x() {
  x_ = 0;
}
inline float PlayerInfo_S_TO_C::_internal_x() const {
  return x_;
}
inline float PlayerInfo_S_TO_C::x() const {
  // @@protoc_insertion_point(field_get:Update_ShooterTest.PlayerInfo_S_TO_C.x)
  return _internal_x();
}
inline void PlayerInfo_S_TO_C::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PlayerInfo_S_TO_C::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Update_ShooterTest.PlayerInfo_S_TO_C.x)
}

// float y = 2;
inline void PlayerInfo_S_TO_C::clear_y() {
  y_ = 0;
}
inline float PlayerInfo_S_TO_C::_internal_y() const {
  return y_;
}
inline float PlayerInfo_S_TO_C::y() const {
  // @@protoc_insertion_point(field_get:Update_ShooterTest.PlayerInfo_S_TO_C.y)
  return _internal_y();
}
inline void PlayerInfo_S_TO_C::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PlayerInfo_S_TO_C::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Update_ShooterTest.PlayerInfo_S_TO_C.y)
}

// float angle = 3;
inline void PlayerInfo_S_TO_C::clear_angle() {
  angle_ = 0;
}
inline float PlayerInfo_S_TO_C::_internal_angle() const {
  return angle_;
}
inline float PlayerInfo_S_TO_C::angle() const {
  // @@protoc_insertion_point(field_get:Update_ShooterTest.PlayerInfo_S_TO_C.angle)
  return _internal_angle();
}
inline void PlayerInfo_S_TO_C::_internal_set_angle(float value) {
  
  angle_ = value;
}
inline void PlayerInfo_S_TO_C::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:Update_ShooterTest.PlayerInfo_S_TO_C.angle)
}

// int32 id = 4;
inline void PlayerInfo_S_TO_C::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo_S_TO_C::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo_S_TO_C::id() const {
  // @@protoc_insertion_point(field_get:Update_ShooterTest.PlayerInfo_S_TO_C.id)
  return _internal_id();
}
inline void PlayerInfo_S_TO_C::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void PlayerInfo_S_TO_C::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Update_ShooterTest.PlayerInfo_S_TO_C.id)
}

// -------------------------------------------------------------------

// UpdateInfo_S_TO_C

// int32 lastProcessedFrameID = 1;
inline void UpdateInfo_S_TO_C::clear_lastprocessedframeid() {
  lastprocessedframeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateInfo_S_TO_C::_internal_lastprocessedframeid() const {
  return lastprocessedframeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateInfo_S_TO_C::lastprocessedframeid() const {
  // @@protoc_insertion_point(field_get:Update_ShooterTest.UpdateInfo_S_TO_C.lastProcessedFrameID)
  return _internal_lastprocessedframeid();
}
inline void UpdateInfo_S_TO_C::_internal_set_lastprocessedframeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lastprocessedframeid_ = value;
}
inline void UpdateInfo_S_TO_C::set_lastprocessedframeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lastprocessedframeid(value);
  // @@protoc_insertion_point(field_set:Update_ShooterTest.UpdateInfo_S_TO_C.lastProcessedFrameID)
}

// repeated .Update_ShooterTest.PlayerInfo_S_TO_C playerInfos = 2;
inline int UpdateInfo_S_TO_C::_internal_playerinfos_size() const {
  return playerinfos_.size();
}
inline int UpdateInfo_S_TO_C::playerinfos_size() const {
  return _internal_playerinfos_size();
}
inline void UpdateInfo_S_TO_C::clear_playerinfos() {
  playerinfos_.Clear();
}
inline ::Update_ShooterTest::PlayerInfo_S_TO_C* UpdateInfo_S_TO_C::mutable_playerinfos(int index) {
  // @@protoc_insertion_point(field_mutable:Update_ShooterTest.UpdateInfo_S_TO_C.playerInfos)
  return playerinfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Update_ShooterTest::PlayerInfo_S_TO_C >*
UpdateInfo_S_TO_C::mutable_playerinfos() {
  // @@protoc_insertion_point(field_mutable_list:Update_ShooterTest.UpdateInfo_S_TO_C.playerInfos)
  return &playerinfos_;
}
inline const ::Update_ShooterTest::PlayerInfo_S_TO_C& UpdateInfo_S_TO_C::_internal_playerinfos(int index) const {
  return playerinfos_.Get(index);
}
inline const ::Update_ShooterTest::PlayerInfo_S_TO_C& UpdateInfo_S_TO_C::playerinfos(int index) const {
  // @@protoc_insertion_point(field_get:Update_ShooterTest.UpdateInfo_S_TO_C.playerInfos)
  return _internal_playerinfos(index);
}
inline ::Update_ShooterTest::PlayerInfo_S_TO_C* UpdateInfo_S_TO_C::_internal_add_playerinfos() {
  return playerinfos_.Add();
}
inline ::Update_ShooterTest::PlayerInfo_S_TO_C* UpdateInfo_S_TO_C::add_playerinfos() {
  ::Update_ShooterTest::PlayerInfo_S_TO_C* _add = _internal_add_playerinfos();
  // @@protoc_insertion_point(field_add:Update_ShooterTest.UpdateInfo_S_TO_C.playerInfos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Update_ShooterTest::PlayerInfo_S_TO_C >&
UpdateInfo_S_TO_C::playerinfos() const {
  // @@protoc_insertion_point(field_list:Update_ShooterTest.UpdateInfo_S_TO_C.playerInfos)
  return playerinfos_;
}

// int32 inputBufferSize = 3;
inline void UpdateInfo_S_TO_C::clear_inputbuffersize() {
  inputbuffersize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateInfo_S_TO_C::_internal_inputbuffersize() const {
  return inputbuffersize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateInfo_S_TO_C::inputbuffersize() const {
  // @@protoc_insertion_point(field_get:Update_ShooterTest.UpdateInfo_S_TO_C.inputBufferSize)
  return _internal_inputbuffersize();
}
inline void UpdateInfo_S_TO_C::_internal_set_inputbuffersize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inputbuffersize_ = value;
}
inline void UpdateInfo_S_TO_C::set_inputbuffersize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inputbuffersize(value);
  // @@protoc_insertion_point(field_set:Update_ShooterTest.UpdateInfo_S_TO_C.inputBufferSize)
}

// -------------------------------------------------------------------

// KcpConnectReq_C_S

// -------------------------------------------------------------------

// PlayerInput_C_TO_S

// int32 frameID = 1;
inline void PlayerInput_C_TO_S::clear_frameid() {
  frameid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInput_C_TO_S::_internal_frameid() const {
  return frameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInput_C_TO_S::frameid() const {
  // @@protoc_insertion_point(field_get:Update_ShooterTest.PlayerInput_C_TO_S.frameID)
  return _internal_frameid();
}
inline void PlayerInput_C_TO_S::_internal_set_frameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frameid_ = value;
}
inline void PlayerInput_C_TO_S::set_frameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frameid(value);
  // @@protoc_insertion_point(field_set:Update_ShooterTest.PlayerInput_C_TO_S.frameID)
}

// bool w = 2;
inline void PlayerInput_C_TO_S::clear_w() {
  w_ = false;
}
inline bool PlayerInput_C_TO_S::_internal_w() const {
  return w_;
}
inline bool PlayerInput_C_TO_S::w() const {
  // @@protoc_insertion_point(field_get:Update_ShooterTest.PlayerInput_C_TO_S.w)
  return _internal_w();
}
inline void PlayerInput_C_TO_S::_internal_set_w(bool value) {
  
  w_ = value;
}
inline void PlayerInput_C_TO_S::set_w(bool value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:Update_ShooterTest.PlayerInput_C_TO_S.w)
}

// bool s = 3;
inline void PlayerInput_C_TO_S::clear_s() {
  s_ = false;
}
inline bool PlayerInput_C_TO_S::_internal_s() const {
  return s_;
}
inline bool PlayerInput_C_TO_S::s() const {
  // @@protoc_insertion_point(field_get:Update_ShooterTest.PlayerInput_C_TO_S.s)
  return _internal_s();
}
inline void PlayerInput_C_TO_S::_internal_set_s(bool value) {
  
  s_ = value;
}
inline void PlayerInput_C_TO_S::set_s(bool value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:Update_ShooterTest.PlayerInput_C_TO_S.s)
}

// bool a = 4;
inline void PlayerInput_C_TO_S::clear_a() {
  a_ = false;
}
inline bool PlayerInput_C_TO_S::_internal_a() const {
  return a_;
}
inline bool PlayerInput_C_TO_S::a() const {
  // @@protoc_insertion_point(field_get:Update_ShooterTest.PlayerInput_C_TO_S.a)
  return _internal_a();
}
inline void PlayerInput_C_TO_S::_internal_set_a(bool value) {
  
  a_ = value;
}
inline void PlayerInput_C_TO_S::set_a(bool value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:Update_ShooterTest.PlayerInput_C_TO_S.a)
}

// bool d = 5;
inline void PlayerInput_C_TO_S::clear_d() {
  d_ = false;
}
inline bool PlayerInput_C_TO_S::_internal_d() const {
  return d_;
}
inline bool PlayerInput_C_TO_S::d() const {
  // @@protoc_insertion_point(field_get:Update_ShooterTest.PlayerInput_C_TO_S.d)
  return _internal_d();
}
inline void PlayerInput_C_TO_S::_internal_set_d(bool value) {
  
  d_ = value;
}
inline void PlayerInput_C_TO_S::set_d(bool value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:Update_ShooterTest.PlayerInput_C_TO_S.d)
}

// float rotation = 6;
inline void PlayerInput_C_TO_S::clear_rotation() {
  rotation_ = 0;
}
inline float PlayerInput_C_TO_S::_internal_rotation() const {
  return rotation_;
}
inline float PlayerInput_C_TO_S::rotation() const {
  // @@protoc_insertion_point(field_get:Update_ShooterTest.PlayerInput_C_TO_S.rotation)
  return _internal_rotation();
}
inline void PlayerInput_C_TO_S::_internal_set_rotation(float value) {
  
  rotation_ = value;
}
inline void PlayerInput_C_TO_S::set_rotation(float value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:Update_ShooterTest.PlayerInput_C_TO_S.rotation)
}

// int32 id = 7;
inline void PlayerInput_C_TO_S::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInput_C_TO_S::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInput_C_TO_S::id() const {
  // @@protoc_insertion_point(field_get:Update_ShooterTest.PlayerInput_C_TO_S.id)
  return _internal_id();
}
inline void PlayerInput_C_TO_S::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void PlayerInput_C_TO_S::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Update_ShooterTest.PlayerInput_C_TO_S.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Update_ShooterTest

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Update_ShooterTest::TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Update_ShooterTest::TYPE>() {
  return ::Update_ShooterTest::TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
