// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Update_ShooterTest {
constexpr RttMeasure_C_TO_S::RttMeasure_C_TO_S(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rtttime_(0)
  , packetid_(0){}
struct RttMeasure_C_TO_SDefaultTypeInternal {
  constexpr RttMeasure_C_TO_SDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RttMeasure_C_TO_SDefaultTypeInternal() {}
  union {
    RttMeasure_C_TO_S _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RttMeasure_C_TO_SDefaultTypeInternal _RttMeasure_C_TO_S_default_instance_;
constexpr RttMeasure_S_TO_C::RttMeasure_S_TO_C(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : packetid_(0){}
struct RttMeasure_S_TO_CDefaultTypeInternal {
  constexpr RttMeasure_S_TO_CDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RttMeasure_S_TO_CDefaultTypeInternal() {}
  union {
    RttMeasure_S_TO_C _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RttMeasure_S_TO_CDefaultTypeInternal _RttMeasure_S_TO_C_default_instance_;
constexpr HitAcknowledged_S_TO_C::HitAcknowledged_S_TO_C(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attacker_slotid_(0)
  , enemy_slotid_(0)
  , damage_(0)
  , dead_(false)
  , e_pos_x_(0)
  , e_pos_y_(0)
  , e_rot_(0)
  , a_pos_x_(0)
  , a_pos_y_(0)
  , a_rot_(0){}
struct HitAcknowledged_S_TO_CDefaultTypeInternal {
  constexpr HitAcknowledged_S_TO_CDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HitAcknowledged_S_TO_CDefaultTypeInternal() {}
  union {
    HitAcknowledged_S_TO_C _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HitAcknowledged_S_TO_CDefaultTypeInternal _HitAcknowledged_S_TO_C_default_instance_;
constexpr Welcome_S_TO_C::Welcome_S_TO_C(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , slotid_(0){}
struct Welcome_S_TO_CDefaultTypeInternal {
  constexpr Welcome_S_TO_CDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Welcome_S_TO_CDefaultTypeInternal() {}
  union {
    Welcome_S_TO_C _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Welcome_S_TO_CDefaultTypeInternal _Welcome_S_TO_C_default_instance_;
constexpr PlayerLeft_S_TO_C::PlayerLeft_S_TO_C(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slotid_(0){}
struct PlayerLeft_S_TO_CDefaultTypeInternal {
  constexpr PlayerLeft_S_TO_CDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerLeft_S_TO_CDefaultTypeInternal() {}
  union {
    PlayerLeft_S_TO_C _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerLeft_S_TO_CDefaultTypeInternal _PlayerLeft_S_TO_C_default_instance_;
constexpr PlayerNickname_C_TO_S::PlayerNickname_C_TO_S(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PlayerNickname_C_TO_SDefaultTypeInternal {
  constexpr PlayerNickname_C_TO_SDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerNickname_C_TO_SDefaultTypeInternal() {}
  union {
    PlayerNickname_C_TO_S _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerNickname_C_TO_SDefaultTypeInternal _PlayerNickname_C_TO_S_default_instance_;
constexpr SpawnPlayer_S_TO_C::SpawnPlayer_S_TO_C(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , slotid_(0)
  , x_(0)
  , y_(0)
  , angle_(0){}
struct SpawnPlayer_S_TO_CDefaultTypeInternal {
  constexpr SpawnPlayer_S_TO_CDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpawnPlayer_S_TO_CDefaultTypeInternal() {}
  union {
    SpawnPlayer_S_TO_C _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpawnPlayer_S_TO_CDefaultTypeInternal _SpawnPlayer_S_TO_C_default_instance_;
constexpr StartGame_S_TO_C::StartGame_S_TO_C(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StartGame_S_TO_CDefaultTypeInternal {
  constexpr StartGame_S_TO_CDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartGame_S_TO_CDefaultTypeInternal() {}
  union {
    StartGame_S_TO_C _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartGame_S_TO_CDefaultTypeInternal _StartGame_S_TO_C_default_instance_;
constexpr PlayerInfo_S_TO_C::PlayerInfo_S_TO_C(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , angle_(0)
  , id_(0){}
struct PlayerInfo_S_TO_CDefaultTypeInternal {
  constexpr PlayerInfo_S_TO_CDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerInfo_S_TO_CDefaultTypeInternal() {}
  union {
    PlayerInfo_S_TO_C _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerInfo_S_TO_CDefaultTypeInternal _PlayerInfo_S_TO_C_default_instance_;
constexpr UpdateInfo_S_TO_C::UpdateInfo_S_TO_C(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerinfos_()
  , lastprocessedframeid_(0)
  , inputbuffersize_(0){}
struct UpdateInfo_S_TO_CDefaultTypeInternal {
  constexpr UpdateInfo_S_TO_CDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateInfo_S_TO_CDefaultTypeInternal() {}
  union {
    UpdateInfo_S_TO_C _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateInfo_S_TO_CDefaultTypeInternal _UpdateInfo_S_TO_C_default_instance_;
constexpr PlayerInput_C_TO_S::PlayerInput_C_TO_S(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frameid_(0)
  , w_(false)
  , s_(false)
  , a_(false)
  , d_(false)
  , mousex_(0)
  , mousey_(0)
  , mousedown_(false){}
struct PlayerInput_C_TO_SDefaultTypeInternal {
  constexpr PlayerInput_C_TO_SDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerInput_C_TO_SDefaultTypeInternal() {}
  union {
    PlayerInput_C_TO_S _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerInput_C_TO_SDefaultTypeInternal _PlayerInput_C_TO_S_default_instance_;
constexpr PlayerInputs_C_TO_S::PlayerInputs_C_TO_S(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputs_()
  , id_(0){}
struct PlayerInputs_C_TO_SDefaultTypeInternal {
  constexpr PlayerInputs_C_TO_SDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerInputs_C_TO_SDefaultTypeInternal() {}
  union {
    PlayerInputs_C_TO_S _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerInputs_C_TO_SDefaultTypeInternal _PlayerInputs_C_TO_S_default_instance_;
}  // namespace Update_ShooterTest
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_message_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::RttMeasure_C_TO_S, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::RttMeasure_C_TO_S, packetid_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::RttMeasure_C_TO_S, rtttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::RttMeasure_S_TO_C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::RttMeasure_S_TO_C, packetid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::HitAcknowledged_S_TO_C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::HitAcknowledged_S_TO_C, attacker_slotid_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::HitAcknowledged_S_TO_C, enemy_slotid_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::HitAcknowledged_S_TO_C, damage_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::HitAcknowledged_S_TO_C, dead_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::HitAcknowledged_S_TO_C, e_pos_x_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::HitAcknowledged_S_TO_C, e_pos_y_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::HitAcknowledged_S_TO_C, e_rot_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::HitAcknowledged_S_TO_C, a_pos_x_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::HitAcknowledged_S_TO_C, a_pos_y_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::HitAcknowledged_S_TO_C, a_rot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::Welcome_S_TO_C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::Welcome_S_TO_C, slotid_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::Welcome_S_TO_C, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerLeft_S_TO_C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerLeft_S_TO_C, slotid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerNickname_C_TO_S, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerNickname_C_TO_S, nickname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::SpawnPlayer_S_TO_C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::SpawnPlayer_S_TO_C, slotid_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::SpawnPlayer_S_TO_C, nickname_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::SpawnPlayer_S_TO_C, x_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::SpawnPlayer_S_TO_C, y_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::SpawnPlayer_S_TO_C, angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::StartGame_S_TO_C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerInfo_S_TO_C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerInfo_S_TO_C, x_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerInfo_S_TO_C, y_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerInfo_S_TO_C, angle_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerInfo_S_TO_C, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::UpdateInfo_S_TO_C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::UpdateInfo_S_TO_C, lastprocessedframeid_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::UpdateInfo_S_TO_C, playerinfos_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::UpdateInfo_S_TO_C, inputbuffersize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerInput_C_TO_S, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerInput_C_TO_S, frameid_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerInput_C_TO_S, w_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerInput_C_TO_S, s_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerInput_C_TO_S, a_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerInput_C_TO_S, d_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerInput_C_TO_S, mousex_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerInput_C_TO_S, mousey_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerInput_C_TO_S, mousedown_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerInputs_C_TO_S, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerInputs_C_TO_S, inputs_),
  PROTOBUF_FIELD_OFFSET(::Update_ShooterTest::PlayerInputs_C_TO_S, id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Update_ShooterTest::RttMeasure_C_TO_S)},
  { 8, -1, -1, sizeof(::Update_ShooterTest::RttMeasure_S_TO_C)},
  { 15, -1, -1, sizeof(::Update_ShooterTest::HitAcknowledged_S_TO_C)},
  { 31, -1, -1, sizeof(::Update_ShooterTest::Welcome_S_TO_C)},
  { 39, -1, -1, sizeof(::Update_ShooterTest::PlayerLeft_S_TO_C)},
  { 46, -1, -1, sizeof(::Update_ShooterTest::PlayerNickname_C_TO_S)},
  { 53, -1, -1, sizeof(::Update_ShooterTest::SpawnPlayer_S_TO_C)},
  { 64, -1, -1, sizeof(::Update_ShooterTest::StartGame_S_TO_C)},
  { 70, -1, -1, sizeof(::Update_ShooterTest::PlayerInfo_S_TO_C)},
  { 80, -1, -1, sizeof(::Update_ShooterTest::UpdateInfo_S_TO_C)},
  { 89, -1, -1, sizeof(::Update_ShooterTest::PlayerInput_C_TO_S)},
  { 103, -1, -1, sizeof(::Update_ShooterTest::PlayerInputs_C_TO_S)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Update_ShooterTest::_RttMeasure_C_TO_S_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Update_ShooterTest::_RttMeasure_S_TO_C_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Update_ShooterTest::_HitAcknowledged_S_TO_C_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Update_ShooterTest::_Welcome_S_TO_C_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Update_ShooterTest::_PlayerLeft_S_TO_C_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Update_ShooterTest::_PlayerNickname_C_TO_S_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Update_ShooterTest::_SpawnPlayer_S_TO_C_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Update_ShooterTest::_StartGame_S_TO_C_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Update_ShooterTest::_PlayerInfo_S_TO_C_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Update_ShooterTest::_UpdateInfo_S_TO_C_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Update_ShooterTest::_PlayerInput_C_TO_S_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Update_ShooterTest::_PlayerInputs_C_TO_S_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\022Update_ShooterTest\"6\n\021R"
  "ttMeasure_C_TO_S\022\020\n\010packetId\030\001 \001(\005\022\017\n\007rt"
  "tTime\030\002 \001(\001\"%\n\021RttMeasure_S_TO_C\022\020\n\010pack"
  "etId\030\001 \001(\005\"\307\001\n\026HitAcknowledged_S_TO_C\022\027\n"
  "\017attacker_slotid\030\001 \001(\005\022\024\n\014enemy_slotid\030\002"
  " \001(\005\022\016\n\006damage\030\003 \001(\005\022\014\n\004dead\030\004 \001(\010\022\017\n\007e_"
  "pos_x\030\005 \001(\002\022\017\n\007e_pos_y\030\006 \001(\002\022\r\n\005e_rot\030\007 "
  "\001(\002\022\017\n\007a_pos_x\030\010 \001(\002\022\017\n\007a_pos_y\030\t \001(\002\022\r\n"
  "\005a_rot\030\n \001(\002\"/\n\016Welcome_S_TO_C\022\016\n\006slotid"
  "\030\001 \001(\005\022\r\n\005token\030\002 \001(\t\"#\n\021PlayerLeft_S_TO"
  "_C\022\016\n\006slotid\030\001 \001(\005\")\n\025PlayerNickname_C_T"
  "O_S\022\020\n\010nickname\030\001 \001(\t\"[\n\022SpawnPlayer_S_T"
  "O_C\022\016\n\006slotid\030\001 \001(\005\022\020\n\010nickname\030\002 \001(\t\022\t\n"
  "\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\r\n\005angle\030\005 \001(\002\"\022\n\020St"
  "artGame_S_TO_C\"D\n\021PlayerInfo_S_TO_C\022\t\n\001x"
  "\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\r\n\005angle\030\003 \001(\002\022\n\n\002id\030\004"
  " \001(\005\"\206\001\n\021UpdateInfo_S_TO_C\022\034\n\024lastProces"
  "sedFrameID\030\001 \001(\005\022:\n\013playerInfos\030\002 \003(\0132%."
  "Update_ShooterTest.PlayerInfo_S_TO_C\022\027\n\017"
  "inputBufferSize\030\003 \001(\005\"\204\001\n\022PlayerInput_C_"
  "TO_S\022\017\n\007frameID\030\001 \001(\005\022\t\n\001w\030\002 \001(\010\022\t\n\001s\030\003 "
  "\001(\010\022\t\n\001a\030\004 \001(\010\022\t\n\001d\030\005 \001(\010\022\016\n\006mouseX\030\006 \001("
  "\002\022\016\n\006mouseY\030\007 \001(\002\022\021\n\tmouseDown\030\010 \001(\010\"Y\n\023"
  "PlayerInputs_C_TO_S\0226\n\006inputs\030\001 \003(\0132&.Up"
  "date_ShooterTest.PlayerInput_C_TO_S\022\n\n\002i"
  "d\030\002 \001(\005*\243\002\n\004TYPE\022\025\n\021updateInfo_S_TO_C\020\000\022"
  "\031\n\025playerNickname_C_TO_S\020\001\022\022\n\016welcome_S_"
  "TO_C\020\002\022\025\n\021playerInfo_S_TO_C\020\003\022\026\n\022playerI"
  "nput_C_TO_S\020\004\022\026\n\022spawnPlayer_S_TO_C\020\005\022\024\n"
  "\020startGame_S_TO_C\020\006\022\025\n\021playerLeft_S_TO_C"
  "\020\007\022\027\n\023playerInputs_C_TO_S\020\010\022\025\n\021rttMeasur"
  "e_C_TO_S\020\t\022\025\n\021rttMeasure_S_TO_C\020\n\022\032\n\026hit"
  "Acknowledged_S_TO_C\020\013b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, false, 1309, descriptor_table_protodef_message_2eproto, "message.proto", 
  &descriptor_table_message_2eproto_once, nullptr, 0, 12,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_message_2eproto_getter() {
  return &descriptor_table_message_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_message_2eproto(&descriptor_table_message_2eproto);
namespace Update_ShooterTest {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[0];
}
bool TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RttMeasure_C_TO_S::_Internal {
 public:
};

RttMeasure_C_TO_S::RttMeasure_C_TO_S(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Update_ShooterTest.RttMeasure_C_TO_S)
}
RttMeasure_C_TO_S::RttMeasure_C_TO_S(const RttMeasure_C_TO_S& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rtttime_, &from.rtttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&packetid_) -
    reinterpret_cast<char*>(&rtttime_)) + sizeof(packetid_));
  // @@protoc_insertion_point(copy_constructor:Update_ShooterTest.RttMeasure_C_TO_S)
}

void RttMeasure_C_TO_S::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rtttime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&packetid_) -
    reinterpret_cast<char*>(&rtttime_)) + sizeof(packetid_));
}

RttMeasure_C_TO_S::~RttMeasure_C_TO_S() {
  // @@protoc_insertion_point(destructor:Update_ShooterTest.RttMeasure_C_TO_S)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RttMeasure_C_TO_S::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RttMeasure_C_TO_S::ArenaDtor(void* object) {
  RttMeasure_C_TO_S* _this = reinterpret_cast< RttMeasure_C_TO_S* >(object);
  (void)_this;
}
void RttMeasure_C_TO_S::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RttMeasure_C_TO_S::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RttMeasure_C_TO_S::Clear() {
// @@protoc_insertion_point(message_clear_start:Update_ShooterTest.RttMeasure_C_TO_S)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rtttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packetid_) -
      reinterpret_cast<char*>(&rtttime_)) + sizeof(packetid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RttMeasure_C_TO_S::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 packetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          packetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double rttTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          rtttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RttMeasure_C_TO_S::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Update_ShooterTest.RttMeasure_C_TO_S)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 packetId = 1;
  if (this->_internal_packetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_packetid(), target);
  }

  // double rttTime = 2;
  if (!(this->_internal_rtttime() <= 0 && this->_internal_rtttime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_rtttime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Update_ShooterTest.RttMeasure_C_TO_S)
  return target;
}

size_t RttMeasure_C_TO_S::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Update_ShooterTest.RttMeasure_C_TO_S)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rttTime = 2;
  if (!(this->_internal_rtttime() <= 0 && this->_internal_rtttime() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 packetId = 1;
  if (this->_internal_packetid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_packetid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RttMeasure_C_TO_S::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RttMeasure_C_TO_S::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RttMeasure_C_TO_S::GetClassData() const { return &_class_data_; }

void RttMeasure_C_TO_S::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RttMeasure_C_TO_S *>(to)->MergeFrom(
      static_cast<const RttMeasure_C_TO_S &>(from));
}


void RttMeasure_C_TO_S::MergeFrom(const RttMeasure_C_TO_S& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Update_ShooterTest.RttMeasure_C_TO_S)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_rtttime() <= 0 && from._internal_rtttime() >= 0)) {
    _internal_set_rtttime(from._internal_rtttime());
  }
  if (from._internal_packetid() != 0) {
    _internal_set_packetid(from._internal_packetid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RttMeasure_C_TO_S::CopyFrom(const RttMeasure_C_TO_S& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Update_ShooterTest.RttMeasure_C_TO_S)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RttMeasure_C_TO_S::IsInitialized() const {
  return true;
}

void RttMeasure_C_TO_S::InternalSwap(RttMeasure_C_TO_S* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RttMeasure_C_TO_S, packetid_)
      + sizeof(RttMeasure_C_TO_S::packetid_)
      - PROTOBUF_FIELD_OFFSET(RttMeasure_C_TO_S, rtttime_)>(
          reinterpret_cast<char*>(&rtttime_),
          reinterpret_cast<char*>(&other->rtttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RttMeasure_C_TO_S::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[0]);
}

// ===================================================================

class RttMeasure_S_TO_C::_Internal {
 public:
};

RttMeasure_S_TO_C::RttMeasure_S_TO_C(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Update_ShooterTest.RttMeasure_S_TO_C)
}
RttMeasure_S_TO_C::RttMeasure_S_TO_C(const RttMeasure_S_TO_C& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  packetid_ = from.packetid_;
  // @@protoc_insertion_point(copy_constructor:Update_ShooterTest.RttMeasure_S_TO_C)
}

void RttMeasure_S_TO_C::SharedCtor() {
packetid_ = 0;
}

RttMeasure_S_TO_C::~RttMeasure_S_TO_C() {
  // @@protoc_insertion_point(destructor:Update_ShooterTest.RttMeasure_S_TO_C)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RttMeasure_S_TO_C::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RttMeasure_S_TO_C::ArenaDtor(void* object) {
  RttMeasure_S_TO_C* _this = reinterpret_cast< RttMeasure_S_TO_C* >(object);
  (void)_this;
}
void RttMeasure_S_TO_C::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RttMeasure_S_TO_C::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RttMeasure_S_TO_C::Clear() {
// @@protoc_insertion_point(message_clear_start:Update_ShooterTest.RttMeasure_S_TO_C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packetid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RttMeasure_S_TO_C::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 packetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          packetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RttMeasure_S_TO_C::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Update_ShooterTest.RttMeasure_S_TO_C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 packetId = 1;
  if (this->_internal_packetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_packetid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Update_ShooterTest.RttMeasure_S_TO_C)
  return target;
}

size_t RttMeasure_S_TO_C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Update_ShooterTest.RttMeasure_S_TO_C)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 packetId = 1;
  if (this->_internal_packetid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_packetid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RttMeasure_S_TO_C::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RttMeasure_S_TO_C::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RttMeasure_S_TO_C::GetClassData() const { return &_class_data_; }

void RttMeasure_S_TO_C::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RttMeasure_S_TO_C *>(to)->MergeFrom(
      static_cast<const RttMeasure_S_TO_C &>(from));
}


void RttMeasure_S_TO_C::MergeFrom(const RttMeasure_S_TO_C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Update_ShooterTest.RttMeasure_S_TO_C)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_packetid() != 0) {
    _internal_set_packetid(from._internal_packetid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RttMeasure_S_TO_C::CopyFrom(const RttMeasure_S_TO_C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Update_ShooterTest.RttMeasure_S_TO_C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RttMeasure_S_TO_C::IsInitialized() const {
  return true;
}

void RttMeasure_S_TO_C::InternalSwap(RttMeasure_S_TO_C* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(packetid_, other->packetid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RttMeasure_S_TO_C::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[1]);
}

// ===================================================================

class HitAcknowledged_S_TO_C::_Internal {
 public:
};

HitAcknowledged_S_TO_C::HitAcknowledged_S_TO_C(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Update_ShooterTest.HitAcknowledged_S_TO_C)
}
HitAcknowledged_S_TO_C::HitAcknowledged_S_TO_C(const HitAcknowledged_S_TO_C& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&attacker_slotid_, &from.attacker_slotid_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_rot_) -
    reinterpret_cast<char*>(&attacker_slotid_)) + sizeof(a_rot_));
  // @@protoc_insertion_point(copy_constructor:Update_ShooterTest.HitAcknowledged_S_TO_C)
}

void HitAcknowledged_S_TO_C::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&attacker_slotid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&a_rot_) -
    reinterpret_cast<char*>(&attacker_slotid_)) + sizeof(a_rot_));
}

HitAcknowledged_S_TO_C::~HitAcknowledged_S_TO_C() {
  // @@protoc_insertion_point(destructor:Update_ShooterTest.HitAcknowledged_S_TO_C)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HitAcknowledged_S_TO_C::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HitAcknowledged_S_TO_C::ArenaDtor(void* object) {
  HitAcknowledged_S_TO_C* _this = reinterpret_cast< HitAcknowledged_S_TO_C* >(object);
  (void)_this;
}
void HitAcknowledged_S_TO_C::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HitAcknowledged_S_TO_C::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HitAcknowledged_S_TO_C::Clear() {
// @@protoc_insertion_point(message_clear_start:Update_ShooterTest.HitAcknowledged_S_TO_C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&attacker_slotid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_rot_) -
      reinterpret_cast<char*>(&attacker_slotid_)) + sizeof(a_rot_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitAcknowledged_S_TO_C::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 attacker_slotid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          attacker_slotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 enemy_slotid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enemy_slotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 damage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool dead = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float e_pos_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          e_pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float e_pos_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          e_pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float e_rot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          e_rot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a_pos_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          a_pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a_pos_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          a_pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a_rot = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          a_rot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HitAcknowledged_S_TO_C::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Update_ShooterTest.HitAcknowledged_S_TO_C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 attacker_slotid = 1;
  if (this->_internal_attacker_slotid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_attacker_slotid(), target);
  }

  // int32 enemy_slotid = 2;
  if (this->_internal_enemy_slotid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_enemy_slotid(), target);
  }

  // int32 damage = 3;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_damage(), target);
  }

  // bool dead = 4;
  if (this->_internal_dead() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_dead(), target);
  }

  // float e_pos_x = 5;
  if (!(this->_internal_e_pos_x() <= 0 && this->_internal_e_pos_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_e_pos_x(), target);
  }

  // float e_pos_y = 6;
  if (!(this->_internal_e_pos_y() <= 0 && this->_internal_e_pos_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_e_pos_y(), target);
  }

  // float e_rot = 7;
  if (!(this->_internal_e_rot() <= 0 && this->_internal_e_rot() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_e_rot(), target);
  }

  // float a_pos_x = 8;
  if (!(this->_internal_a_pos_x() <= 0 && this->_internal_a_pos_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_a_pos_x(), target);
  }

  // float a_pos_y = 9;
  if (!(this->_internal_a_pos_y() <= 0 && this->_internal_a_pos_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_a_pos_y(), target);
  }

  // float a_rot = 10;
  if (!(this->_internal_a_rot() <= 0 && this->_internal_a_rot() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_a_rot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Update_ShooterTest.HitAcknowledged_S_TO_C)
  return target;
}

size_t HitAcknowledged_S_TO_C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Update_ShooterTest.HitAcknowledged_S_TO_C)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 attacker_slotid = 1;
  if (this->_internal_attacker_slotid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_attacker_slotid());
  }

  // int32 enemy_slotid = 2;
  if (this->_internal_enemy_slotid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_enemy_slotid());
  }

  // int32 damage = 3;
  if (this->_internal_damage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
  }

  // bool dead = 4;
  if (this->_internal_dead() != 0) {
    total_size += 1 + 1;
  }

  // float e_pos_x = 5;
  if (!(this->_internal_e_pos_x() <= 0 && this->_internal_e_pos_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float e_pos_y = 6;
  if (!(this->_internal_e_pos_y() <= 0 && this->_internal_e_pos_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float e_rot = 7;
  if (!(this->_internal_e_rot() <= 0 && this->_internal_e_rot() >= 0)) {
    total_size += 1 + 4;
  }

  // float a_pos_x = 8;
  if (!(this->_internal_a_pos_x() <= 0 && this->_internal_a_pos_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float a_pos_y = 9;
  if (!(this->_internal_a_pos_y() <= 0 && this->_internal_a_pos_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float a_rot = 10;
  if (!(this->_internal_a_rot() <= 0 && this->_internal_a_rot() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HitAcknowledged_S_TO_C::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HitAcknowledged_S_TO_C::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HitAcknowledged_S_TO_C::GetClassData() const { return &_class_data_; }

void HitAcknowledged_S_TO_C::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HitAcknowledged_S_TO_C *>(to)->MergeFrom(
      static_cast<const HitAcknowledged_S_TO_C &>(from));
}


void HitAcknowledged_S_TO_C::MergeFrom(const HitAcknowledged_S_TO_C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Update_ShooterTest.HitAcknowledged_S_TO_C)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_attacker_slotid() != 0) {
    _internal_set_attacker_slotid(from._internal_attacker_slotid());
  }
  if (from._internal_enemy_slotid() != 0) {
    _internal_set_enemy_slotid(from._internal_enemy_slotid());
  }
  if (from._internal_damage() != 0) {
    _internal_set_damage(from._internal_damage());
  }
  if (from._internal_dead() != 0) {
    _internal_set_dead(from._internal_dead());
  }
  if (!(from._internal_e_pos_x() <= 0 && from._internal_e_pos_x() >= 0)) {
    _internal_set_e_pos_x(from._internal_e_pos_x());
  }
  if (!(from._internal_e_pos_y() <= 0 && from._internal_e_pos_y() >= 0)) {
    _internal_set_e_pos_y(from._internal_e_pos_y());
  }
  if (!(from._internal_e_rot() <= 0 && from._internal_e_rot() >= 0)) {
    _internal_set_e_rot(from._internal_e_rot());
  }
  if (!(from._internal_a_pos_x() <= 0 && from._internal_a_pos_x() >= 0)) {
    _internal_set_a_pos_x(from._internal_a_pos_x());
  }
  if (!(from._internal_a_pos_y() <= 0 && from._internal_a_pos_y() >= 0)) {
    _internal_set_a_pos_y(from._internal_a_pos_y());
  }
  if (!(from._internal_a_rot() <= 0 && from._internal_a_rot() >= 0)) {
    _internal_set_a_rot(from._internal_a_rot());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HitAcknowledged_S_TO_C::CopyFrom(const HitAcknowledged_S_TO_C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Update_ShooterTest.HitAcknowledged_S_TO_C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitAcknowledged_S_TO_C::IsInitialized() const {
  return true;
}

void HitAcknowledged_S_TO_C::InternalSwap(HitAcknowledged_S_TO_C* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HitAcknowledged_S_TO_C, a_rot_)
      + sizeof(HitAcknowledged_S_TO_C::a_rot_)
      - PROTOBUF_FIELD_OFFSET(HitAcknowledged_S_TO_C, attacker_slotid_)>(
          reinterpret_cast<char*>(&attacker_slotid_),
          reinterpret_cast<char*>(&other->attacker_slotid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HitAcknowledged_S_TO_C::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[2]);
}

// ===================================================================

class Welcome_S_TO_C::_Internal {
 public:
};

Welcome_S_TO_C::Welcome_S_TO_C(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Update_ShooterTest.Welcome_S_TO_C)
}
Welcome_S_TO_C::Welcome_S_TO_C(const Welcome_S_TO_C& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  slotid_ = from.slotid_;
  // @@protoc_insertion_point(copy_constructor:Update_ShooterTest.Welcome_S_TO_C)
}

void Welcome_S_TO_C::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
slotid_ = 0;
}

Welcome_S_TO_C::~Welcome_S_TO_C() {
  // @@protoc_insertion_point(destructor:Update_ShooterTest.Welcome_S_TO_C)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Welcome_S_TO_C::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Welcome_S_TO_C::ArenaDtor(void* object) {
  Welcome_S_TO_C* _this = reinterpret_cast< Welcome_S_TO_C* >(object);
  (void)_this;
}
void Welcome_S_TO_C::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Welcome_S_TO_C::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Welcome_S_TO_C::Clear() {
// @@protoc_insertion_point(message_clear_start:Update_ShooterTest.Welcome_S_TO_C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  slotid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Welcome_S_TO_C::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 slotid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          slotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Update_ShooterTest.Welcome_S_TO_C.token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Welcome_S_TO_C::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Update_ShooterTest.Welcome_S_TO_C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 slotid = 1;
  if (this->_internal_slotid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_slotid(), target);
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Update_ShooterTest.Welcome_S_TO_C.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Update_ShooterTest.Welcome_S_TO_C)
  return target;
}

size_t Welcome_S_TO_C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Update_ShooterTest.Welcome_S_TO_C)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // int32 slotid = 1;
  if (this->_internal_slotid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slotid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Welcome_S_TO_C::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Welcome_S_TO_C::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Welcome_S_TO_C::GetClassData() const { return &_class_data_; }

void Welcome_S_TO_C::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Welcome_S_TO_C *>(to)->MergeFrom(
      static_cast<const Welcome_S_TO_C &>(from));
}


void Welcome_S_TO_C::MergeFrom(const Welcome_S_TO_C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Update_ShooterTest.Welcome_S_TO_C)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _internal_set_token(from._internal_token());
  }
  if (from._internal_slotid() != 0) {
    _internal_set_slotid(from._internal_slotid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Welcome_S_TO_C::CopyFrom(const Welcome_S_TO_C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Update_ShooterTest.Welcome_S_TO_C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welcome_S_TO_C::IsInitialized() const {
  return true;
}

void Welcome_S_TO_C::InternalSwap(Welcome_S_TO_C* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
  swap(slotid_, other->slotid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Welcome_S_TO_C::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[3]);
}

// ===================================================================

class PlayerLeft_S_TO_C::_Internal {
 public:
};

PlayerLeft_S_TO_C::PlayerLeft_S_TO_C(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Update_ShooterTest.PlayerLeft_S_TO_C)
}
PlayerLeft_S_TO_C::PlayerLeft_S_TO_C(const PlayerLeft_S_TO_C& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slotid_ = from.slotid_;
  // @@protoc_insertion_point(copy_constructor:Update_ShooterTest.PlayerLeft_S_TO_C)
}

void PlayerLeft_S_TO_C::SharedCtor() {
slotid_ = 0;
}

PlayerLeft_S_TO_C::~PlayerLeft_S_TO_C() {
  // @@protoc_insertion_point(destructor:Update_ShooterTest.PlayerLeft_S_TO_C)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerLeft_S_TO_C::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerLeft_S_TO_C::ArenaDtor(void* object) {
  PlayerLeft_S_TO_C* _this = reinterpret_cast< PlayerLeft_S_TO_C* >(object);
  (void)_this;
}
void PlayerLeft_S_TO_C::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerLeft_S_TO_C::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerLeft_S_TO_C::Clear() {
// @@protoc_insertion_point(message_clear_start:Update_ShooterTest.PlayerLeft_S_TO_C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slotid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerLeft_S_TO_C::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 slotid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          slotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerLeft_S_TO_C::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Update_ShooterTest.PlayerLeft_S_TO_C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 slotid = 1;
  if (this->_internal_slotid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_slotid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Update_ShooterTest.PlayerLeft_S_TO_C)
  return target;
}

size_t PlayerLeft_S_TO_C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Update_ShooterTest.PlayerLeft_S_TO_C)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 slotid = 1;
  if (this->_internal_slotid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slotid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerLeft_S_TO_C::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerLeft_S_TO_C::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerLeft_S_TO_C::GetClassData() const { return &_class_data_; }

void PlayerLeft_S_TO_C::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerLeft_S_TO_C *>(to)->MergeFrom(
      static_cast<const PlayerLeft_S_TO_C &>(from));
}


void PlayerLeft_S_TO_C::MergeFrom(const PlayerLeft_S_TO_C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Update_ShooterTest.PlayerLeft_S_TO_C)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_slotid() != 0) {
    _internal_set_slotid(from._internal_slotid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerLeft_S_TO_C::CopyFrom(const PlayerLeft_S_TO_C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Update_ShooterTest.PlayerLeft_S_TO_C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLeft_S_TO_C::IsInitialized() const {
  return true;
}

void PlayerLeft_S_TO_C::InternalSwap(PlayerLeft_S_TO_C* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(slotid_, other->slotid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerLeft_S_TO_C::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[4]);
}

// ===================================================================

class PlayerNickname_C_TO_S::_Internal {
 public:
};

PlayerNickname_C_TO_S::PlayerNickname_C_TO_S(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Update_ShooterTest.PlayerNickname_C_TO_S)
}
PlayerNickname_C_TO_S::PlayerNickname_C_TO_S(const PlayerNickname_C_TO_S& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Update_ShooterTest.PlayerNickname_C_TO_S)
}

void PlayerNickname_C_TO_S::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PlayerNickname_C_TO_S::~PlayerNickname_C_TO_S() {
  // @@protoc_insertion_point(destructor:Update_ShooterTest.PlayerNickname_C_TO_S)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerNickname_C_TO_S::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerNickname_C_TO_S::ArenaDtor(void* object) {
  PlayerNickname_C_TO_S* _this = reinterpret_cast< PlayerNickname_C_TO_S* >(object);
  (void)_this;
}
void PlayerNickname_C_TO_S::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerNickname_C_TO_S::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerNickname_C_TO_S::Clear() {
// @@protoc_insertion_point(message_clear_start:Update_ShooterTest.PlayerNickname_C_TO_S)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerNickname_C_TO_S::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Update_ShooterTest.PlayerNickname_C_TO_S.nickname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerNickname_C_TO_S::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Update_ShooterTest.PlayerNickname_C_TO_S)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Update_ShooterTest.PlayerNickname_C_TO_S.nickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Update_ShooterTest.PlayerNickname_C_TO_S)
  return target;
}

size_t PlayerNickname_C_TO_S::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Update_ShooterTest.PlayerNickname_C_TO_S)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerNickname_C_TO_S::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerNickname_C_TO_S::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerNickname_C_TO_S::GetClassData() const { return &_class_data_; }

void PlayerNickname_C_TO_S::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerNickname_C_TO_S *>(to)->MergeFrom(
      static_cast<const PlayerNickname_C_TO_S &>(from));
}


void PlayerNickname_C_TO_S::MergeFrom(const PlayerNickname_C_TO_S& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Update_ShooterTest.PlayerNickname_C_TO_S)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerNickname_C_TO_S::CopyFrom(const PlayerNickname_C_TO_S& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Update_ShooterTest.PlayerNickname_C_TO_S)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerNickname_C_TO_S::IsInitialized() const {
  return true;
}

void PlayerNickname_C_TO_S::InternalSwap(PlayerNickname_C_TO_S* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerNickname_C_TO_S::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[5]);
}

// ===================================================================

class SpawnPlayer_S_TO_C::_Internal {
 public:
};

SpawnPlayer_S_TO_C::SpawnPlayer_S_TO_C(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Update_ShooterTest.SpawnPlayer_S_TO_C)
}
SpawnPlayer_S_TO_C::SpawnPlayer_S_TO_C(const SpawnPlayer_S_TO_C& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&slotid_, &from.slotid_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&slotid_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:Update_ShooterTest.SpawnPlayer_S_TO_C)
}

void SpawnPlayer_S_TO_C::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slotid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&slotid_)) + sizeof(angle_));
}

SpawnPlayer_S_TO_C::~SpawnPlayer_S_TO_C() {
  // @@protoc_insertion_point(destructor:Update_ShooterTest.SpawnPlayer_S_TO_C)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpawnPlayer_S_TO_C::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpawnPlayer_S_TO_C::ArenaDtor(void* object) {
  SpawnPlayer_S_TO_C* _this = reinterpret_cast< SpawnPlayer_S_TO_C* >(object);
  (void)_this;
}
void SpawnPlayer_S_TO_C::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpawnPlayer_S_TO_C::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpawnPlayer_S_TO_C::Clear() {
// @@protoc_insertion_point(message_clear_start:Update_ShooterTest.SpawnPlayer_S_TO_C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  ::memset(&slotid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&slotid_)) + sizeof(angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpawnPlayer_S_TO_C::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 slotid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          slotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Update_ShooterTest.SpawnPlayer_S_TO_C.nickname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float angle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpawnPlayer_S_TO_C::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Update_ShooterTest.SpawnPlayer_S_TO_C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 slotid = 1;
  if (this->_internal_slotid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_slotid(), target);
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Update_ShooterTest.SpawnPlayer_S_TO_C.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // float x = 3;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float y = 4;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // float angle = 5;
  if (!(this->_internal_angle() <= 0 && this->_internal_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Update_ShooterTest.SpawnPlayer_S_TO_C)
  return target;
}

size_t SpawnPlayer_S_TO_C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Update_ShooterTest.SpawnPlayer_S_TO_C)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // int32 slotid = 1;
  if (this->_internal_slotid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slotid());
  }

  // float x = 3;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 4;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float angle = 5;
  if (!(this->_internal_angle() <= 0 && this->_internal_angle() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpawnPlayer_S_TO_C::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpawnPlayer_S_TO_C::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpawnPlayer_S_TO_C::GetClassData() const { return &_class_data_; }

void SpawnPlayer_S_TO_C::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpawnPlayer_S_TO_C *>(to)->MergeFrom(
      static_cast<const SpawnPlayer_S_TO_C &>(from));
}


void SpawnPlayer_S_TO_C::MergeFrom(const SpawnPlayer_S_TO_C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Update_ShooterTest.SpawnPlayer_S_TO_C)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_slotid() != 0) {
    _internal_set_slotid(from._internal_slotid());
  }
  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_angle() <= 0 && from._internal_angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpawnPlayer_S_TO_C::CopyFrom(const SpawnPlayer_S_TO_C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Update_ShooterTest.SpawnPlayer_S_TO_C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnPlayer_S_TO_C::IsInitialized() const {
  return true;
}

void SpawnPlayer_S_TO_C::InternalSwap(SpawnPlayer_S_TO_C* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpawnPlayer_S_TO_C, angle_)
      + sizeof(SpawnPlayer_S_TO_C::angle_)
      - PROTOBUF_FIELD_OFFSET(SpawnPlayer_S_TO_C, slotid_)>(
          reinterpret_cast<char*>(&slotid_),
          reinterpret_cast<char*>(&other->slotid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpawnPlayer_S_TO_C::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[6]);
}

// ===================================================================

class StartGame_S_TO_C::_Internal {
 public:
};

StartGame_S_TO_C::StartGame_S_TO_C(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Update_ShooterTest.StartGame_S_TO_C)
}
StartGame_S_TO_C::StartGame_S_TO_C(const StartGame_S_TO_C& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Update_ShooterTest.StartGame_S_TO_C)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartGame_S_TO_C::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartGame_S_TO_C::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StartGame_S_TO_C::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[7]);
}

// ===================================================================

class PlayerInfo_S_TO_C::_Internal {
 public:
};

PlayerInfo_S_TO_C::PlayerInfo_S_TO_C(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Update_ShooterTest.PlayerInfo_S_TO_C)
}
PlayerInfo_S_TO_C::PlayerInfo_S_TO_C(const PlayerInfo_S_TO_C& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&x_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:Update_ShooterTest.PlayerInfo_S_TO_C)
}

void PlayerInfo_S_TO_C::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&x_)) + sizeof(id_));
}

PlayerInfo_S_TO_C::~PlayerInfo_S_TO_C() {
  // @@protoc_insertion_point(destructor:Update_ShooterTest.PlayerInfo_S_TO_C)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerInfo_S_TO_C::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerInfo_S_TO_C::ArenaDtor(void* object) {
  PlayerInfo_S_TO_C* _this = reinterpret_cast< PlayerInfo_S_TO_C* >(object);
  (void)_this;
}
void PlayerInfo_S_TO_C::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInfo_S_TO_C::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerInfo_S_TO_C::Clear() {
// @@protoc_insertion_point(message_clear_start:Update_ShooterTest.PlayerInfo_S_TO_C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&x_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo_S_TO_C::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInfo_S_TO_C::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Update_ShooterTest.PlayerInfo_S_TO_C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float angle = 3;
  if (!(this->_internal_angle() <= 0 && this->_internal_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_angle(), target);
  }

  // int32 id = 4;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Update_ShooterTest.PlayerInfo_S_TO_C)
  return target;
}

size_t PlayerInfo_S_TO_C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Update_ShooterTest.PlayerInfo_S_TO_C)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float angle = 3;
  if (!(this->_internal_angle() <= 0 && this->_internal_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 id = 4;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfo_S_TO_C::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerInfo_S_TO_C::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfo_S_TO_C::GetClassData() const { return &_class_data_; }

void PlayerInfo_S_TO_C::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerInfo_S_TO_C *>(to)->MergeFrom(
      static_cast<const PlayerInfo_S_TO_C &>(from));
}


void PlayerInfo_S_TO_C::MergeFrom(const PlayerInfo_S_TO_C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Update_ShooterTest.PlayerInfo_S_TO_C)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_angle() <= 0 && from._internal_angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfo_S_TO_C::CopyFrom(const PlayerInfo_S_TO_C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Update_ShooterTest.PlayerInfo_S_TO_C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo_S_TO_C::IsInitialized() const {
  return true;
}

void PlayerInfo_S_TO_C::InternalSwap(PlayerInfo_S_TO_C* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo_S_TO_C, id_)
      + sizeof(PlayerInfo_S_TO_C::id_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo_S_TO_C, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo_S_TO_C::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[8]);
}

// ===================================================================

class UpdateInfo_S_TO_C::_Internal {
 public:
};

UpdateInfo_S_TO_C::UpdateInfo_S_TO_C(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  playerinfos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Update_ShooterTest.UpdateInfo_S_TO_C)
}
UpdateInfo_S_TO_C::UpdateInfo_S_TO_C(const UpdateInfo_S_TO_C& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      playerinfos_(from.playerinfos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lastprocessedframeid_, &from.lastprocessedframeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&inputbuffersize_) -
    reinterpret_cast<char*>(&lastprocessedframeid_)) + sizeof(inputbuffersize_));
  // @@protoc_insertion_point(copy_constructor:Update_ShooterTest.UpdateInfo_S_TO_C)
}

void UpdateInfo_S_TO_C::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lastprocessedframeid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inputbuffersize_) -
    reinterpret_cast<char*>(&lastprocessedframeid_)) + sizeof(inputbuffersize_));
}

UpdateInfo_S_TO_C::~UpdateInfo_S_TO_C() {
  // @@protoc_insertion_point(destructor:Update_ShooterTest.UpdateInfo_S_TO_C)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateInfo_S_TO_C::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UpdateInfo_S_TO_C::ArenaDtor(void* object) {
  UpdateInfo_S_TO_C* _this = reinterpret_cast< UpdateInfo_S_TO_C* >(object);
  (void)_this;
}
void UpdateInfo_S_TO_C::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateInfo_S_TO_C::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateInfo_S_TO_C::Clear() {
// @@protoc_insertion_point(message_clear_start:Update_ShooterTest.UpdateInfo_S_TO_C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerinfos_.Clear();
  ::memset(&lastprocessedframeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inputbuffersize_) -
      reinterpret_cast<char*>(&lastprocessedframeid_)) + sizeof(inputbuffersize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateInfo_S_TO_C::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 lastProcessedFrameID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lastprocessedframeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Update_ShooterTest.PlayerInfo_S_TO_C playerInfos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 inputBufferSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          inputbuffersize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateInfo_S_TO_C::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Update_ShooterTest.UpdateInfo_S_TO_C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lastProcessedFrameID = 1;
  if (this->_internal_lastprocessedframeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lastprocessedframeid(), target);
  }

  // repeated .Update_ShooterTest.PlayerInfo_S_TO_C playerInfos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playerinfos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_playerinfos(i), target, stream);
  }

  // int32 inputBufferSize = 3;
  if (this->_internal_inputbuffersize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_inputbuffersize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Update_ShooterTest.UpdateInfo_S_TO_C)
  return target;
}

size_t UpdateInfo_S_TO_C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Update_ShooterTest.UpdateInfo_S_TO_C)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Update_ShooterTest.PlayerInfo_S_TO_C playerInfos = 2;
  total_size += 1UL * this->_internal_playerinfos_size();
  for (const auto& msg : this->playerinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 lastProcessedFrameID = 1;
  if (this->_internal_lastprocessedframeid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lastprocessedframeid());
  }

  // int32 inputBufferSize = 3;
  if (this->_internal_inputbuffersize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_inputbuffersize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateInfo_S_TO_C::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateInfo_S_TO_C::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateInfo_S_TO_C::GetClassData() const { return &_class_data_; }

void UpdateInfo_S_TO_C::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateInfo_S_TO_C *>(to)->MergeFrom(
      static_cast<const UpdateInfo_S_TO_C &>(from));
}


void UpdateInfo_S_TO_C::MergeFrom(const UpdateInfo_S_TO_C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Update_ShooterTest.UpdateInfo_S_TO_C)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerinfos_.MergeFrom(from.playerinfos_);
  if (from._internal_lastprocessedframeid() != 0) {
    _internal_set_lastprocessedframeid(from._internal_lastprocessedframeid());
  }
  if (from._internal_inputbuffersize() != 0) {
    _internal_set_inputbuffersize(from._internal_inputbuffersize());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateInfo_S_TO_C::CopyFrom(const UpdateInfo_S_TO_C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Update_ShooterTest.UpdateInfo_S_TO_C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateInfo_S_TO_C::IsInitialized() const {
  return true;
}

void UpdateInfo_S_TO_C::InternalSwap(UpdateInfo_S_TO_C* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  playerinfos_.InternalSwap(&other->playerinfos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateInfo_S_TO_C, inputbuffersize_)
      + sizeof(UpdateInfo_S_TO_C::inputbuffersize_)
      - PROTOBUF_FIELD_OFFSET(UpdateInfo_S_TO_C, lastprocessedframeid_)>(
          reinterpret_cast<char*>(&lastprocessedframeid_),
          reinterpret_cast<char*>(&other->lastprocessedframeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateInfo_S_TO_C::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[9]);
}

// ===================================================================

class PlayerInput_C_TO_S::_Internal {
 public:
};

PlayerInput_C_TO_S::PlayerInput_C_TO_S(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Update_ShooterTest.PlayerInput_C_TO_S)
}
PlayerInput_C_TO_S::PlayerInput_C_TO_S(const PlayerInput_C_TO_S& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&frameid_, &from.frameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mousedown_) -
    reinterpret_cast<char*>(&frameid_)) + sizeof(mousedown_));
  // @@protoc_insertion_point(copy_constructor:Update_ShooterTest.PlayerInput_C_TO_S)
}

void PlayerInput_C_TO_S::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frameid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mousedown_) -
    reinterpret_cast<char*>(&frameid_)) + sizeof(mousedown_));
}

PlayerInput_C_TO_S::~PlayerInput_C_TO_S() {
  // @@protoc_insertion_point(destructor:Update_ShooterTest.PlayerInput_C_TO_S)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerInput_C_TO_S::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerInput_C_TO_S::ArenaDtor(void* object) {
  PlayerInput_C_TO_S* _this = reinterpret_cast< PlayerInput_C_TO_S* >(object);
  (void)_this;
}
void PlayerInput_C_TO_S::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInput_C_TO_S::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerInput_C_TO_S::Clear() {
// @@protoc_insertion_point(message_clear_start:Update_ShooterTest.PlayerInput_C_TO_S)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&frameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mousedown_) -
      reinterpret_cast<char*>(&frameid_)) + sizeof(mousedown_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInput_C_TO_S::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 frameID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool w = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool d = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float mouseX = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          mousex_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouseY = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          mousey_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool mouseDown = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          mousedown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInput_C_TO_S::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Update_ShooterTest.PlayerInput_C_TO_S)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frameID = 1;
  if (this->_internal_frameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_frameid(), target);
  }

  // bool w = 2;
  if (this->_internal_w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_w(), target);
  }

  // bool s = 3;
  if (this->_internal_s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_s(), target);
  }

  // bool a = 4;
  if (this->_internal_a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_a(), target);
  }

  // bool d = 5;
  if (this->_internal_d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_d(), target);
  }

  // float mouseX = 6;
  if (!(this->_internal_mousex() <= 0 && this->_internal_mousex() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_mousex(), target);
  }

  // float mouseY = 7;
  if (!(this->_internal_mousey() <= 0 && this->_internal_mousey() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_mousey(), target);
  }

  // bool mouseDown = 8;
  if (this->_internal_mousedown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_mousedown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Update_ShooterTest.PlayerInput_C_TO_S)
  return target;
}

size_t PlayerInput_C_TO_S::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Update_ShooterTest.PlayerInput_C_TO_S)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 frameID = 1;
  if (this->_internal_frameid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_frameid());
  }

  // bool w = 2;
  if (this->_internal_w() != 0) {
    total_size += 1 + 1;
  }

  // bool s = 3;
  if (this->_internal_s() != 0) {
    total_size += 1 + 1;
  }

  // bool a = 4;
  if (this->_internal_a() != 0) {
    total_size += 1 + 1;
  }

  // bool d = 5;
  if (this->_internal_d() != 0) {
    total_size += 1 + 1;
  }

  // float mouseX = 6;
  if (!(this->_internal_mousex() <= 0 && this->_internal_mousex() >= 0)) {
    total_size += 1 + 4;
  }

  // float mouseY = 7;
  if (!(this->_internal_mousey() <= 0 && this->_internal_mousey() >= 0)) {
    total_size += 1 + 4;
  }

  // bool mouseDown = 8;
  if (this->_internal_mousedown() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInput_C_TO_S::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerInput_C_TO_S::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInput_C_TO_S::GetClassData() const { return &_class_data_; }

void PlayerInput_C_TO_S::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerInput_C_TO_S *>(to)->MergeFrom(
      static_cast<const PlayerInput_C_TO_S &>(from));
}


void PlayerInput_C_TO_S::MergeFrom(const PlayerInput_C_TO_S& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Update_ShooterTest.PlayerInput_C_TO_S)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_frameid() != 0) {
    _internal_set_frameid(from._internal_frameid());
  }
  if (from._internal_w() != 0) {
    _internal_set_w(from._internal_w());
  }
  if (from._internal_s() != 0) {
    _internal_set_s(from._internal_s());
  }
  if (from._internal_a() != 0) {
    _internal_set_a(from._internal_a());
  }
  if (from._internal_d() != 0) {
    _internal_set_d(from._internal_d());
  }
  if (!(from._internal_mousex() <= 0 && from._internal_mousex() >= 0)) {
    _internal_set_mousex(from._internal_mousex());
  }
  if (!(from._internal_mousey() <= 0 && from._internal_mousey() >= 0)) {
    _internal_set_mousey(from._internal_mousey());
  }
  if (from._internal_mousedown() != 0) {
    _internal_set_mousedown(from._internal_mousedown());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInput_C_TO_S::CopyFrom(const PlayerInput_C_TO_S& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Update_ShooterTest.PlayerInput_C_TO_S)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInput_C_TO_S::IsInitialized() const {
  return true;
}

void PlayerInput_C_TO_S::InternalSwap(PlayerInput_C_TO_S* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInput_C_TO_S, mousedown_)
      + sizeof(PlayerInput_C_TO_S::mousedown_)
      - PROTOBUF_FIELD_OFFSET(PlayerInput_C_TO_S, frameid_)>(
          reinterpret_cast<char*>(&frameid_),
          reinterpret_cast<char*>(&other->frameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInput_C_TO_S::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[10]);
}

// ===================================================================

class PlayerInputs_C_TO_S::_Internal {
 public:
};

PlayerInputs_C_TO_S::PlayerInputs_C_TO_S(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  inputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Update_ShooterTest.PlayerInputs_C_TO_S)
}
PlayerInputs_C_TO_S::PlayerInputs_C_TO_S(const PlayerInputs_C_TO_S& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Update_ShooterTest.PlayerInputs_C_TO_S)
}

void PlayerInputs_C_TO_S::SharedCtor() {
id_ = 0;
}

PlayerInputs_C_TO_S::~PlayerInputs_C_TO_S() {
  // @@protoc_insertion_point(destructor:Update_ShooterTest.PlayerInputs_C_TO_S)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerInputs_C_TO_S::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerInputs_C_TO_S::ArenaDtor(void* object) {
  PlayerInputs_C_TO_S* _this = reinterpret_cast< PlayerInputs_C_TO_S* >(object);
  (void)_this;
}
void PlayerInputs_C_TO_S::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInputs_C_TO_S::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerInputs_C_TO_S::Clear() {
// @@protoc_insertion_point(message_clear_start:Update_ShooterTest.PlayerInputs_C_TO_S)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInputs_C_TO_S::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Update_ShooterTest.PlayerInput_C_TO_S inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInputs_C_TO_S::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Update_ShooterTest.PlayerInputs_C_TO_S)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Update_ShooterTest.PlayerInput_C_TO_S inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_inputs(i), target, stream);
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Update_ShooterTest.PlayerInputs_C_TO_S)
  return target;
}

size_t PlayerInputs_C_TO_S::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Update_ShooterTest.PlayerInputs_C_TO_S)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Update_ShooterTest.PlayerInput_C_TO_S inputs = 1;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInputs_C_TO_S::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerInputs_C_TO_S::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInputs_C_TO_S::GetClassData() const { return &_class_data_; }

void PlayerInputs_C_TO_S::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerInputs_C_TO_S *>(to)->MergeFrom(
      static_cast<const PlayerInputs_C_TO_S &>(from));
}


void PlayerInputs_C_TO_S::MergeFrom(const PlayerInputs_C_TO_S& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Update_ShooterTest.PlayerInputs_C_TO_S)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInputs_C_TO_S::CopyFrom(const PlayerInputs_C_TO_S& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Update_ShooterTest.PlayerInputs_C_TO_S)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInputs_C_TO_S::IsInitialized() const {
  return true;
}

void PlayerInputs_C_TO_S::InternalSwap(PlayerInputs_C_TO_S* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInputs_C_TO_S::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Update_ShooterTest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Update_ShooterTest::RttMeasure_C_TO_S* Arena::CreateMaybeMessage< ::Update_ShooterTest::RttMeasure_C_TO_S >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Update_ShooterTest::RttMeasure_C_TO_S >(arena);
}
template<> PROTOBUF_NOINLINE ::Update_ShooterTest::RttMeasure_S_TO_C* Arena::CreateMaybeMessage< ::Update_ShooterTest::RttMeasure_S_TO_C >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Update_ShooterTest::RttMeasure_S_TO_C >(arena);
}
template<> PROTOBUF_NOINLINE ::Update_ShooterTest::HitAcknowledged_S_TO_C* Arena::CreateMaybeMessage< ::Update_ShooterTest::HitAcknowledged_S_TO_C >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Update_ShooterTest::HitAcknowledged_S_TO_C >(arena);
}
template<> PROTOBUF_NOINLINE ::Update_ShooterTest::Welcome_S_TO_C* Arena::CreateMaybeMessage< ::Update_ShooterTest::Welcome_S_TO_C >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Update_ShooterTest::Welcome_S_TO_C >(arena);
}
template<> PROTOBUF_NOINLINE ::Update_ShooterTest::PlayerLeft_S_TO_C* Arena::CreateMaybeMessage< ::Update_ShooterTest::PlayerLeft_S_TO_C >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Update_ShooterTest::PlayerLeft_S_TO_C >(arena);
}
template<> PROTOBUF_NOINLINE ::Update_ShooterTest::PlayerNickname_C_TO_S* Arena::CreateMaybeMessage< ::Update_ShooterTest::PlayerNickname_C_TO_S >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Update_ShooterTest::PlayerNickname_C_TO_S >(arena);
}
template<> PROTOBUF_NOINLINE ::Update_ShooterTest::SpawnPlayer_S_TO_C* Arena::CreateMaybeMessage< ::Update_ShooterTest::SpawnPlayer_S_TO_C >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Update_ShooterTest::SpawnPlayer_S_TO_C >(arena);
}
template<> PROTOBUF_NOINLINE ::Update_ShooterTest::StartGame_S_TO_C* Arena::CreateMaybeMessage< ::Update_ShooterTest::StartGame_S_TO_C >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Update_ShooterTest::StartGame_S_TO_C >(arena);
}
template<> PROTOBUF_NOINLINE ::Update_ShooterTest::PlayerInfo_S_TO_C* Arena::CreateMaybeMessage< ::Update_ShooterTest::PlayerInfo_S_TO_C >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Update_ShooterTest::PlayerInfo_S_TO_C >(arena);
}
template<> PROTOBUF_NOINLINE ::Update_ShooterTest::UpdateInfo_S_TO_C* Arena::CreateMaybeMessage< ::Update_ShooterTest::UpdateInfo_S_TO_C >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Update_ShooterTest::UpdateInfo_S_TO_C >(arena);
}
template<> PROTOBUF_NOINLINE ::Update_ShooterTest::PlayerInput_C_TO_S* Arena::CreateMaybeMessage< ::Update_ShooterTest::PlayerInput_C_TO_S >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Update_ShooterTest::PlayerInput_C_TO_S >(arena);
}
template<> PROTOBUF_NOINLINE ::Update_ShooterTest::PlayerInputs_C_TO_S* Arena::CreateMaybeMessage< ::Update_ShooterTest::PlayerInputs_C_TO_S >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Update_ShooterTest::PlayerInputs_C_TO_S >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
