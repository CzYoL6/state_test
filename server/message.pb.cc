// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Update {
constexpr PlayerInfo_S_TO_C::PlayerInfo_S_TO_C(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , angle_(0)
  , id_(0){}
struct PlayerInfo_S_TO_CDefaultTypeInternal {
  constexpr PlayerInfo_S_TO_CDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerInfo_S_TO_CDefaultTypeInternal() {}
  union {
    PlayerInfo_S_TO_C _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerInfo_S_TO_CDefaultTypeInternal _PlayerInfo_S_TO_C_default_instance_;
constexpr UpdateInfo_S_TO_C::UpdateInfo_S_TO_C(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerinfos_()
  , frameid_(0){}
struct UpdateInfo_S_TO_CDefaultTypeInternal {
  constexpr UpdateInfo_S_TO_CDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateInfo_S_TO_CDefaultTypeInternal() {}
  union {
    UpdateInfo_S_TO_C _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateInfo_S_TO_CDefaultTypeInternal _UpdateInfo_S_TO_C_default_instance_;
constexpr KcpConnectReq_C_S::KcpConnectReq_C_S(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct KcpConnectReq_C_SDefaultTypeInternal {
  constexpr KcpConnectReq_C_SDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KcpConnectReq_C_SDefaultTypeInternal() {}
  union {
    KcpConnectReq_C_S _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KcpConnectReq_C_SDefaultTypeInternal _KcpConnectReq_C_S_default_instance_;
constexpr AddForceToAll_C_TO_S::AddForceToAll_C_TO_S(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AddForceToAll_C_TO_SDefaultTypeInternal {
  constexpr AddForceToAll_C_TO_SDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddForceToAll_C_TO_SDefaultTypeInternal() {}
  union {
    AddForceToAll_C_TO_S _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddForceToAll_C_TO_SDefaultTypeInternal _AddForceToAll_C_TO_S_default_instance_;
constexpr AddNewPlayer_C_TO_S::AddNewPlayer_C_TO_S(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct AddNewPlayer_C_TO_SDefaultTypeInternal {
  constexpr AddNewPlayer_C_TO_SDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddNewPlayer_C_TO_SDefaultTypeInternal() {}
  union {
    AddNewPlayer_C_TO_S _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddNewPlayer_C_TO_SDefaultTypeInternal _AddNewPlayer_C_TO_S_default_instance_;
constexpr AddForceToThisOne_C_TO_S::AddForceToThisOne_C_TO_S(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0){}
struct AddForceToThisOne_C_TO_SDefaultTypeInternal {
  constexpr AddForceToThisOne_C_TO_SDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddForceToThisOne_C_TO_SDefaultTypeInternal() {}
  union {
    AddForceToThisOne_C_TO_S _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddForceToThisOne_C_TO_SDefaultTypeInternal _AddForceToThisOne_C_TO_S_default_instance_;
constexpr AddTorqueToThisOne_C_TO_S::AddTorqueToThisOne_C_TO_S(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0){}
struct AddTorqueToThisOne_C_TO_SDefaultTypeInternal {
  constexpr AddTorqueToThisOne_C_TO_SDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddTorqueToThisOne_C_TO_SDefaultTypeInternal() {}
  union {
    AddTorqueToThisOne_C_TO_S _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddTorqueToThisOne_C_TO_SDefaultTypeInternal _AddTorqueToThisOne_C_TO_S_default_instance_;
}  // namespace Update
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_message_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Update::PlayerInfo_S_TO_C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Update::PlayerInfo_S_TO_C, x_),
  PROTOBUF_FIELD_OFFSET(::Update::PlayerInfo_S_TO_C, y_),
  PROTOBUF_FIELD_OFFSET(::Update::PlayerInfo_S_TO_C, angle_),
  PROTOBUF_FIELD_OFFSET(::Update::PlayerInfo_S_TO_C, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Update::UpdateInfo_S_TO_C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Update::UpdateInfo_S_TO_C, frameid_),
  PROTOBUF_FIELD_OFFSET(::Update::UpdateInfo_S_TO_C, playerinfos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Update::KcpConnectReq_C_S, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Update::AddForceToAll_C_TO_S, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Update::AddNewPlayer_C_TO_S, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Update::AddNewPlayer_C_TO_S, x_),
  PROTOBUF_FIELD_OFFSET(::Update::AddNewPlayer_C_TO_S, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Update::AddForceToThisOne_C_TO_S, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Update::AddForceToThisOne_C_TO_S, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Update::AddTorqueToThisOne_C_TO_S, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Update::AddTorqueToThisOne_C_TO_S, id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Update::PlayerInfo_S_TO_C)},
  { 10, -1, -1, sizeof(::Update::UpdateInfo_S_TO_C)},
  { 18, -1, -1, sizeof(::Update::KcpConnectReq_C_S)},
  { 24, -1, -1, sizeof(::Update::AddForceToAll_C_TO_S)},
  { 30, -1, -1, sizeof(::Update::AddNewPlayer_C_TO_S)},
  { 38, -1, -1, sizeof(::Update::AddForceToThisOne_C_TO_S)},
  { 45, -1, -1, sizeof(::Update::AddTorqueToThisOne_C_TO_S)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Update::_PlayerInfo_S_TO_C_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Update::_UpdateInfo_S_TO_C_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Update::_KcpConnectReq_C_S_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Update::_AddForceToAll_C_TO_S_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Update::_AddNewPlayer_C_TO_S_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Update::_AddForceToThisOne_C_TO_S_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Update::_AddTorqueToThisOne_C_TO_S_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\006Update\"D\n\021PlayerInfo_S_"
  "TO_C\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\r\n\005angle\030\003 \001("
  "\002\022\n\n\002id\030\004 \001(\005\"T\n\021UpdateInfo_S_TO_C\022\017\n\007fr"
  "ameID\030\001 \001(\005\022.\n\013playerInfos\030\002 \003(\0132\031.Updat"
  "e.PlayerInfo_S_TO_C\"\023\n\021KcpConnectReq_C_S"
  "\"\026\n\024AddForceToAll_C_TO_S\"+\n\023AddNewPlayer"
  "_C_TO_S\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"&\n\030AddForc"
  "eToThisOne_C_TO_S\022\n\n\002id\030\001 \001(\005\"\'\n\031AddTorq"
  "ueToThisOne_C_TO_S\022\n\n\002id\030\001 \001(\005*\272\001\n\004TYPE\022"
  "\025\n\021updateInfo_S_TO_C\020\000\022\024\n\020kcpConnectionR"
  "eq\020\001\022\025\n\021playerInfo_S_TO_C\020\002\022\027\n\023addNewPla"
  "yer_C_TO_S\020\003\022\030\n\024addForceToAll_C_TO_S\020\004\022\034"
  "\n\030addForceToThisOne_C_TO_S\020\005\022\035\n\031addTorqu"
  "eToThisOne_C_TO_S\020\006b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, false, 547, descriptor_table_protodef_message_2eproto, "message.proto", 
  &descriptor_table_message_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_message_2eproto_getter() {
  return &descriptor_table_message_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_message_2eproto(&descriptor_table_message_2eproto);
namespace Update {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[0];
}
bool TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PlayerInfo_S_TO_C::_Internal {
 public:
};

PlayerInfo_S_TO_C::PlayerInfo_S_TO_C(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Update.PlayerInfo_S_TO_C)
}
PlayerInfo_S_TO_C::PlayerInfo_S_TO_C(const PlayerInfo_S_TO_C& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&x_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:Update.PlayerInfo_S_TO_C)
}

void PlayerInfo_S_TO_C::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&x_)) + sizeof(id_));
}

PlayerInfo_S_TO_C::~PlayerInfo_S_TO_C() {
  // @@protoc_insertion_point(destructor:Update.PlayerInfo_S_TO_C)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerInfo_S_TO_C::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerInfo_S_TO_C::ArenaDtor(void* object) {
  PlayerInfo_S_TO_C* _this = reinterpret_cast< PlayerInfo_S_TO_C* >(object);
  (void)_this;
}
void PlayerInfo_S_TO_C::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInfo_S_TO_C::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerInfo_S_TO_C::Clear() {
// @@protoc_insertion_point(message_clear_start:Update.PlayerInfo_S_TO_C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&x_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo_S_TO_C::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInfo_S_TO_C::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Update.PlayerInfo_S_TO_C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float angle = 3;
  if (!(this->_internal_angle() <= 0 && this->_internal_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_angle(), target);
  }

  // int32 id = 4;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Update.PlayerInfo_S_TO_C)
  return target;
}

size_t PlayerInfo_S_TO_C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Update.PlayerInfo_S_TO_C)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float angle = 3;
  if (!(this->_internal_angle() <= 0 && this->_internal_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 id = 4;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfo_S_TO_C::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerInfo_S_TO_C::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfo_S_TO_C::GetClassData() const { return &_class_data_; }

void PlayerInfo_S_TO_C::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerInfo_S_TO_C *>(to)->MergeFrom(
      static_cast<const PlayerInfo_S_TO_C &>(from));
}


void PlayerInfo_S_TO_C::MergeFrom(const PlayerInfo_S_TO_C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Update.PlayerInfo_S_TO_C)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_angle() <= 0 && from._internal_angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfo_S_TO_C::CopyFrom(const PlayerInfo_S_TO_C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Update.PlayerInfo_S_TO_C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo_S_TO_C::IsInitialized() const {
  return true;
}

void PlayerInfo_S_TO_C::InternalSwap(PlayerInfo_S_TO_C* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo_S_TO_C, id_)
      + sizeof(PlayerInfo_S_TO_C::id_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo_S_TO_C, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo_S_TO_C::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[0]);
}

// ===================================================================

class UpdateInfo_S_TO_C::_Internal {
 public:
};

UpdateInfo_S_TO_C::UpdateInfo_S_TO_C(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  playerinfos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Update.UpdateInfo_S_TO_C)
}
UpdateInfo_S_TO_C::UpdateInfo_S_TO_C(const UpdateInfo_S_TO_C& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      playerinfos_(from.playerinfos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frameid_ = from.frameid_;
  // @@protoc_insertion_point(copy_constructor:Update.UpdateInfo_S_TO_C)
}

void UpdateInfo_S_TO_C::SharedCtor() {
frameid_ = 0;
}

UpdateInfo_S_TO_C::~UpdateInfo_S_TO_C() {
  // @@protoc_insertion_point(destructor:Update.UpdateInfo_S_TO_C)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateInfo_S_TO_C::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UpdateInfo_S_TO_C::ArenaDtor(void* object) {
  UpdateInfo_S_TO_C* _this = reinterpret_cast< UpdateInfo_S_TO_C* >(object);
  (void)_this;
}
void UpdateInfo_S_TO_C::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateInfo_S_TO_C::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateInfo_S_TO_C::Clear() {
// @@protoc_insertion_point(message_clear_start:Update.UpdateInfo_S_TO_C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerinfos_.Clear();
  frameid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateInfo_S_TO_C::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 frameID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Update.PlayerInfo_S_TO_C playerInfos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateInfo_S_TO_C::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Update.UpdateInfo_S_TO_C)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frameID = 1;
  if (this->_internal_frameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_frameid(), target);
  }

  // repeated .Update.PlayerInfo_S_TO_C playerInfos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playerinfos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_playerinfos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Update.UpdateInfo_S_TO_C)
  return target;
}

size_t UpdateInfo_S_TO_C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Update.UpdateInfo_S_TO_C)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Update.PlayerInfo_S_TO_C playerInfos = 2;
  total_size += 1UL * this->_internal_playerinfos_size();
  for (const auto& msg : this->playerinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 frameID = 1;
  if (this->_internal_frameid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_frameid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateInfo_S_TO_C::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateInfo_S_TO_C::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateInfo_S_TO_C::GetClassData() const { return &_class_data_; }

void UpdateInfo_S_TO_C::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateInfo_S_TO_C *>(to)->MergeFrom(
      static_cast<const UpdateInfo_S_TO_C &>(from));
}


void UpdateInfo_S_TO_C::MergeFrom(const UpdateInfo_S_TO_C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Update.UpdateInfo_S_TO_C)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerinfos_.MergeFrom(from.playerinfos_);
  if (from._internal_frameid() != 0) {
    _internal_set_frameid(from._internal_frameid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateInfo_S_TO_C::CopyFrom(const UpdateInfo_S_TO_C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Update.UpdateInfo_S_TO_C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateInfo_S_TO_C::IsInitialized() const {
  return true;
}

void UpdateInfo_S_TO_C::InternalSwap(UpdateInfo_S_TO_C* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  playerinfos_.InternalSwap(&other->playerinfos_);
  swap(frameid_, other->frameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateInfo_S_TO_C::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[1]);
}

// ===================================================================

class KcpConnectReq_C_S::_Internal {
 public:
};

KcpConnectReq_C_S::KcpConnectReq_C_S(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Update.KcpConnectReq_C_S)
}
KcpConnectReq_C_S::KcpConnectReq_C_S(const KcpConnectReq_C_S& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Update.KcpConnectReq_C_S)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KcpConnectReq_C_S::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KcpConnectReq_C_S::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata KcpConnectReq_C_S::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[2]);
}

// ===================================================================

class AddForceToAll_C_TO_S::_Internal {
 public:
};

AddForceToAll_C_TO_S::AddForceToAll_C_TO_S(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Update.AddForceToAll_C_TO_S)
}
AddForceToAll_C_TO_S::AddForceToAll_C_TO_S(const AddForceToAll_C_TO_S& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Update.AddForceToAll_C_TO_S)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddForceToAll_C_TO_S::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddForceToAll_C_TO_S::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AddForceToAll_C_TO_S::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[3]);
}

// ===================================================================

class AddNewPlayer_C_TO_S::_Internal {
 public:
};

AddNewPlayer_C_TO_S::AddNewPlayer_C_TO_S(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Update.AddNewPlayer_C_TO_S)
}
AddNewPlayer_C_TO_S::AddNewPlayer_C_TO_S(const AddNewPlayer_C_TO_S& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Update.AddNewPlayer_C_TO_S)
}

void AddNewPlayer_C_TO_S::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

AddNewPlayer_C_TO_S::~AddNewPlayer_C_TO_S() {
  // @@protoc_insertion_point(destructor:Update.AddNewPlayer_C_TO_S)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddNewPlayer_C_TO_S::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddNewPlayer_C_TO_S::ArenaDtor(void* object) {
  AddNewPlayer_C_TO_S* _this = reinterpret_cast< AddNewPlayer_C_TO_S* >(object);
  (void)_this;
}
void AddNewPlayer_C_TO_S::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddNewPlayer_C_TO_S::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddNewPlayer_C_TO_S::Clear() {
// @@protoc_insertion_point(message_clear_start:Update.AddNewPlayer_C_TO_S)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddNewPlayer_C_TO_S::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddNewPlayer_C_TO_S::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Update.AddNewPlayer_C_TO_S)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Update.AddNewPlayer_C_TO_S)
  return target;
}

size_t AddNewPlayer_C_TO_S::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Update.AddNewPlayer_C_TO_S)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddNewPlayer_C_TO_S::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddNewPlayer_C_TO_S::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddNewPlayer_C_TO_S::GetClassData() const { return &_class_data_; }

void AddNewPlayer_C_TO_S::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddNewPlayer_C_TO_S *>(to)->MergeFrom(
      static_cast<const AddNewPlayer_C_TO_S &>(from));
}


void AddNewPlayer_C_TO_S::MergeFrom(const AddNewPlayer_C_TO_S& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Update.AddNewPlayer_C_TO_S)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddNewPlayer_C_TO_S::CopyFrom(const AddNewPlayer_C_TO_S& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Update.AddNewPlayer_C_TO_S)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNewPlayer_C_TO_S::IsInitialized() const {
  return true;
}

void AddNewPlayer_C_TO_S::InternalSwap(AddNewPlayer_C_TO_S* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddNewPlayer_C_TO_S, y_)
      + sizeof(AddNewPlayer_C_TO_S::y_)
      - PROTOBUF_FIELD_OFFSET(AddNewPlayer_C_TO_S, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddNewPlayer_C_TO_S::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[4]);
}

// ===================================================================

class AddForceToThisOne_C_TO_S::_Internal {
 public:
};

AddForceToThisOne_C_TO_S::AddForceToThisOne_C_TO_S(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Update.AddForceToThisOne_C_TO_S)
}
AddForceToThisOne_C_TO_S::AddForceToThisOne_C_TO_S(const AddForceToThisOne_C_TO_S& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Update.AddForceToThisOne_C_TO_S)
}

void AddForceToThisOne_C_TO_S::SharedCtor() {
id_ = 0;
}

AddForceToThisOne_C_TO_S::~AddForceToThisOne_C_TO_S() {
  // @@protoc_insertion_point(destructor:Update.AddForceToThisOne_C_TO_S)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddForceToThisOne_C_TO_S::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddForceToThisOne_C_TO_S::ArenaDtor(void* object) {
  AddForceToThisOne_C_TO_S* _this = reinterpret_cast< AddForceToThisOne_C_TO_S* >(object);
  (void)_this;
}
void AddForceToThisOne_C_TO_S::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddForceToThisOne_C_TO_S::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddForceToThisOne_C_TO_S::Clear() {
// @@protoc_insertion_point(message_clear_start:Update.AddForceToThisOne_C_TO_S)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddForceToThisOne_C_TO_S::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddForceToThisOne_C_TO_S::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Update.AddForceToThisOne_C_TO_S)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Update.AddForceToThisOne_C_TO_S)
  return target;
}

size_t AddForceToThisOne_C_TO_S::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Update.AddForceToThisOne_C_TO_S)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddForceToThisOne_C_TO_S::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddForceToThisOne_C_TO_S::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddForceToThisOne_C_TO_S::GetClassData() const { return &_class_data_; }

void AddForceToThisOne_C_TO_S::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddForceToThisOne_C_TO_S *>(to)->MergeFrom(
      static_cast<const AddForceToThisOne_C_TO_S &>(from));
}


void AddForceToThisOne_C_TO_S::MergeFrom(const AddForceToThisOne_C_TO_S& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Update.AddForceToThisOne_C_TO_S)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddForceToThisOne_C_TO_S::CopyFrom(const AddForceToThisOne_C_TO_S& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Update.AddForceToThisOne_C_TO_S)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddForceToThisOne_C_TO_S::IsInitialized() const {
  return true;
}

void AddForceToThisOne_C_TO_S::InternalSwap(AddForceToThisOne_C_TO_S* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddForceToThisOne_C_TO_S::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[5]);
}

// ===================================================================

class AddTorqueToThisOne_C_TO_S::_Internal {
 public:
};

AddTorqueToThisOne_C_TO_S::AddTorqueToThisOne_C_TO_S(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Update.AddTorqueToThisOne_C_TO_S)
}
AddTorqueToThisOne_C_TO_S::AddTorqueToThisOne_C_TO_S(const AddTorqueToThisOne_C_TO_S& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Update.AddTorqueToThisOne_C_TO_S)
}

void AddTorqueToThisOne_C_TO_S::SharedCtor() {
id_ = 0;
}

AddTorqueToThisOne_C_TO_S::~AddTorqueToThisOne_C_TO_S() {
  // @@protoc_insertion_point(destructor:Update.AddTorqueToThisOne_C_TO_S)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddTorqueToThisOne_C_TO_S::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddTorqueToThisOne_C_TO_S::ArenaDtor(void* object) {
  AddTorqueToThisOne_C_TO_S* _this = reinterpret_cast< AddTorqueToThisOne_C_TO_S* >(object);
  (void)_this;
}
void AddTorqueToThisOne_C_TO_S::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddTorqueToThisOne_C_TO_S::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddTorqueToThisOne_C_TO_S::Clear() {
// @@protoc_insertion_point(message_clear_start:Update.AddTorqueToThisOne_C_TO_S)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddTorqueToThisOne_C_TO_S::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddTorqueToThisOne_C_TO_S::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Update.AddTorqueToThisOne_C_TO_S)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Update.AddTorqueToThisOne_C_TO_S)
  return target;
}

size_t AddTorqueToThisOne_C_TO_S::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Update.AddTorqueToThisOne_C_TO_S)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddTorqueToThisOne_C_TO_S::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddTorqueToThisOne_C_TO_S::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddTorqueToThisOne_C_TO_S::GetClassData() const { return &_class_data_; }

void AddTorqueToThisOne_C_TO_S::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddTorqueToThisOne_C_TO_S *>(to)->MergeFrom(
      static_cast<const AddTorqueToThisOne_C_TO_S &>(from));
}


void AddTorqueToThisOne_C_TO_S::MergeFrom(const AddTorqueToThisOne_C_TO_S& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Update.AddTorqueToThisOne_C_TO_S)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddTorqueToThisOne_C_TO_S::CopyFrom(const AddTorqueToThisOne_C_TO_S& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Update.AddTorqueToThisOne_C_TO_S)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTorqueToThisOne_C_TO_S::IsInitialized() const {
  return true;
}

void AddTorqueToThisOne_C_TO_S::InternalSwap(AddTorqueToThisOne_C_TO_S* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddTorqueToThisOne_C_TO_S::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Update
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Update::PlayerInfo_S_TO_C* Arena::CreateMaybeMessage< ::Update::PlayerInfo_S_TO_C >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Update::PlayerInfo_S_TO_C >(arena);
}
template<> PROTOBUF_NOINLINE ::Update::UpdateInfo_S_TO_C* Arena::CreateMaybeMessage< ::Update::UpdateInfo_S_TO_C >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Update::UpdateInfo_S_TO_C >(arena);
}
template<> PROTOBUF_NOINLINE ::Update::KcpConnectReq_C_S* Arena::CreateMaybeMessage< ::Update::KcpConnectReq_C_S >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Update::KcpConnectReq_C_S >(arena);
}
template<> PROTOBUF_NOINLINE ::Update::AddForceToAll_C_TO_S* Arena::CreateMaybeMessage< ::Update::AddForceToAll_C_TO_S >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Update::AddForceToAll_C_TO_S >(arena);
}
template<> PROTOBUF_NOINLINE ::Update::AddNewPlayer_C_TO_S* Arena::CreateMaybeMessage< ::Update::AddNewPlayer_C_TO_S >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Update::AddNewPlayer_C_TO_S >(arena);
}
template<> PROTOBUF_NOINLINE ::Update::AddForceToThisOne_C_TO_S* Arena::CreateMaybeMessage< ::Update::AddForceToThisOne_C_TO_S >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Update::AddForceToThisOne_C_TO_S >(arena);
}
template<> PROTOBUF_NOINLINE ::Update::AddTorqueToThisOne_C_TO_S* Arena::CreateMaybeMessage< ::Update::AddTorqueToThisOne_C_TO_S >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Update::AddTorqueToThisOne_C_TO_S >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
